{"version":3,"sources":["components/Profile/ProfileInfo/ProfileInfo.module.css","components/Profile/MyPosts/MyPosts.module.css","components/Profile/MyPosts/Post/Post.module.css","components/Profile/Profile.module.css","components/Profile/ProfileInfo/ProfileStatusWithHooks2.tsx","components/Profile/ProfileInfo/ProfileInfo.tsx","components/Profile/MyPosts/Post/Post.tsx","components/Profile/MyPosts/MyPostsContainer.tsx","components/Profile/MyPosts/MyPosts.tsx","components/Profile/Profile.tsx","components/Profile/ProfileContainer.tsx"],"names":["module","exports","ProfileStatusWithHooks2","props","useState","editMode","setEditMode","status","setStatus","useEffect","toString","onDoubleClick","onChange","e","currentTarget","value","autoFocus","onBlur","updateStatus","ProfileInfo","profile","className","s","img","description","src","photos","large","LinearProgress","Post","item","message","count_likes","MyPostsContainer","connect","state","postsPropsAll","dispatch","addPost","newPost","addPostCreateAction","useDispatch","formik","useFormik","initialValues","post","validate","values","errors","length","onSubmit","resetForm","postElements","postsData","map","p","likesCount","postBlock","handleSubmit","textArea_Button","TextField","label","margin","name","getFieldProps","Button","type","variant","color","content","Profile","main","compose","autorisedUserId","auth","id","getUserProfile","getStatus","withRouter","withAuthRedirect","userId","match","params","String"],"mappings":"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","file":"static/js/3.a65a9c74.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"content\":\"ProfileInfo_content__2ztCb\",\"description\":\"ProfileInfo_description__fTi3M\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"textArea_Button\":\"MyPosts_textArea_Button__3ZlzN\",\"item\":\"MyPosts_item__1q-8z\",\"postBlock\":\"MyPosts_postBlock__1oaMi\",\"content\":\"MyPosts_content__Z9JiK\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"item\":\"Post_item__2iIsQ\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"item\":\"Profile_item__1WhUH\",\"main\":\"Profile_main__3mYDF\",\"content\":\"Profile_content__2Hptv\"};","import React, {ChangeEvent, useEffect, useState} from 'react';\r\n\r\ntype ProfileStatusPropstype = {\r\n    status: string | null\r\n    updateStatus: (status: string) => void\r\n}\r\n\r\nexport const ProfileStatusWithHooks2: React.FC<ProfileStatusPropstype> = (props) =>  {\r\n\r\n    let [editMode, setEditMode] = useState(false)\r\n    let [status, setStatus] = useState(props.status)\r\n\r\n    useEffect(() => {\r\n        if(props.status)  setStatus((props.status).toString())\r\n    },[props.status])\r\n\r\n    const activateEditMode = () => {\r\n        setEditMode(true)\r\n    }\r\n\r\n    const deactivateEditMode = () => {\r\n        setEditMode(false)\r\n        if(status) {\r\n            props.updateStatus(status)\r\n        }\r\n    }\r\n\r\n    const onStatusChange = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setStatus(e.currentTarget.value)\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            { !editMode &&\r\n            <div>\r\n                <span onDoubleClick={activateEditMode}>{!props.status ? status : props.status}</span>\r\n            </div>}\r\n            { editMode &&\r\n            <div>\r\n                <input onChange={onStatusChange} autoFocus onBlur={deactivateEditMode}\r\n                       value={status ? status : '----'} />\r\n            </div>}\r\n        </div>\r\n    )\r\n}\r\n\r\n","import React from \"react\";\r\nimport s from './ProfileInfo.module.css'\r\nimport {ProfileType} from \"../../../redux/porfile_reducer\";\r\nimport {ProfileStatusWithHooks2} from \"./ProfileStatusWithHooks2\";\r\nimport {LinearProgress} from \"@material-ui/core\";\r\n\r\ntype profileInfoType = {\r\n    profile:ProfileType | null,\r\n    status:string| null,\r\n    updateStatus : (status:string) => void\r\n}\r\n\r\nexport const ProfileInfo = (props:profileInfoType) => {\r\n\r\n    if(!props.profile || !props.status) {\r\n        return <LinearProgress />\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <div className={s.img}>\r\n               {/* <img\r\n                    src='https://dbijapkm3o6fj.cloudfront.net/resources/20611,1004,1,6,4,0,960,330/-3842-/20161013141806/image-gallery.jpeg'\r\n                    alt='Main image'/>*/}\r\n            </div>\r\n            <div className={s.description}>\r\n                <img src={props.profile.photos.large}/>\r\n                <ProfileStatusWithHooks2 status={props.status} updateStatus={props.updateStatus} />\r\n            </div>\r\n        </div>\r\n    )\r\n}","import React from \"react\";\r\nimport s from './Post.module.css'\r\n\r\ntype PropsPost = {\r\n    message: string\r\n    count_likes: number\r\n}\r\n\r\nexport const Post : React.FC<PropsPost> = (props) => {\r\n    return (\r\n        <div className={s.item}>\r\n            <img src='https://www.interfax.ru/ftproot/photos/photostory/2019/07/09/week4_700.jpg'/>\r\n            {props.message}\r\n            <div>\r\n                <span>{props.count_likes} Like</span>\r\n            </div>\r\n        </div>\r\n    )\r\n}","import {addPostCreateAction} from \"../../../redux/porfile_reducer\";\r\nimport {MyPosts} from \"./MyPosts\";\r\nimport {AddPostType} from \"../../../redux/store\";\r\nimport {connect} from \"react-redux\";\r\nimport {stateType} from \"../../../redux/redux-store\";\r\n\r\n\r\nlet mapStateToProps = (state:stateType) => {\r\n    return {\r\n        postsPropsAll:state.postsPropsAll\r\n    }\r\n}\r\nlet mapDispatchToProps = (dispatch:(action: AddPostType ) => void)=> {\r\n    return {\r\n        addPost:(newPost:string)=>{dispatch(addPostCreateAction(newPost))}\r\n    }\r\n}\r\n\r\nexport const MyPostsContainer = connect(mapStateToProps,mapDispatchToProps)(MyPosts)","import React from \"react\";\r\nimport s from './MyPosts.module.css'\r\nimport {Post} from \"./Post/Post\";\r\nimport {addPostCreateAction, stateType} from \"../../../redux/porfile_reducer\";\r\nimport {useFormik} from \"formik\";\r\nimport {useDispatch} from \"react-redux\";\r\nimport {Button, TextField} from \"@material-ui/core\";\r\n\r\n\r\n\r\n\r\ntype postsAllType = {\r\n    postsPropsAll: stateType\r\n}\r\ntype FormikErrorType = {\r\n    post?: string\r\n}\r\n\r\n\r\nexport const MyPosts = (props: postsAllType) => {\r\n    const dispatch = useDispatch()\r\n    const formik = useFormik({\r\n        initialValues: {\r\n            post: ''\r\n        },\r\n        validate: (values) => {\r\n            const errors: FormikErrorType = {};\r\n            if (values.post.length > 50) {\r\n                errors.post = '';\r\n            }\r\n            return errors;\r\n        },\r\n        onSubmit: value => {\r\n            dispatch(addPostCreateAction(value.post))\r\n            formik.resetForm()\r\n        }\r\n    })\r\n\r\n    let postElements = props.postsPropsAll.postsData.map(p => <Post message={p.message} count_likes={p.likesCount}/>)\r\n\r\n    return (\r\n        <div className={s.postBlock}>\r\n            <h3>My posts</h3>\r\n            <form onSubmit={formik.handleSubmit}>\r\n                <div className={s.textArea_Button}>\r\n                <TextField\r\n                    label=\"Create Post\"\r\n                    margin=\"normal\"\r\n                    name=\"post\"\r\n                    {...formik.getFieldProps('post')}\r\n                />\r\n                <Button type={'submit'} variant=\"outlined\" color={'primary'}>Add post</Button>\r\n                </div>\r\n            </form>\r\n            <div className={s.content}>\r\n                {postElements}\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\n","import React from \"react\";\r\nimport {ProfileInfo} from \"./ProfileInfo/ProfileInfo\";\r\nimport {MyPostsContainer} from \"./MyPosts/MyPostsContainer\";\r\nimport {ProfileType, updateStatus} from \"../../redux/porfile_reducer\";\r\nimport s from \"./Profile.module.css\"\r\n\r\n\r\ntype profilePropsType = {\r\n    profile:ProfileType | null,\r\n    status:string | null,\r\n    updateStatus : (status:string) => void\r\n}\r\n\r\nexport const Profile = (props:profilePropsType) => {\r\n\r\n    return (\r\n        <div className={s.main}>\r\n            <ProfileInfo profile={props.profile} status = {props.status} updateStatus={props.updateStatus}/>\r\n            <MyPostsContainer/>\r\n        </div>\r\n    )\r\n}","import React, {useEffect} from \"react\";\r\nimport {Profile} from \"./Profile\";\r\nimport {connect} from \"react-redux\";\r\nimport {getStatus, getUserProfile, ProfileType, updateStatus} from \"../../redux/porfile_reducer\";\r\nimport {withRouter, RouteComponentProps} from \"react-router-dom\";\r\nimport {stateType} from \"../../redux/redux-store\";\r\nimport {withAuthRedirect} from \"../../hoc/withAuthRedirect\";\r\nimport {compose} from \"redux\";\r\n\r\ntype mapStateToPropsType = {\r\n    profile: null | ProfileType\r\n    status:string| null,\r\n    autorisedUserId:number | null,\r\n}\r\ntype pathParamsType = {\r\n    userId: string\r\n}\r\ntype mapDispatchToPropsType = {\r\n    updateStatus: (status: string) => void\r\n    getUserProfile: (userId: string) => void\r\n    getStatus: (userId: number) => void\r\n}\r\ntype ownPropsType = mapStateToPropsType & mapDispatchToPropsType\r\ntype PropsType = RouteComponentProps<pathParamsType> & ownPropsType\r\n\r\n\r\nconst ProfileContainer = (props: PropsType) => {\r\n    let userId = props.match.params.userId\r\n    useEffect(() => {\r\n        if (!userId) {\r\n            userId = String(props.autorisedUserId)\r\n        }\r\n        props.getUserProfile(userId)\r\n    },[])\r\n\r\n    if (props.profile) {\r\n        props.getStatus(props.profile.userId)\r\n    }\r\n    return (\r\n        <Profile profile={props.profile} status = {props.status} updateStatus={props.updateStatus}/>)\r\n}\r\n\r\nlet mapStateToProps = (state: stateType): mapStateToPropsType => {\r\n    return {\r\n        profile: state.postsPropsAll.profile,\r\n        status:state.postsPropsAll.status,\r\n        autorisedUserId:state.auth.id,\r\n    }\r\n}\r\n\r\n\r\nexport default compose(\r\n    connect(mapStateToProps, {getUserProfile,getStatus,updateStatus}),\r\n    withRouter,\r\n    withAuthRedirect\r\n)(ProfileContainer) as React.ComponentType"],"sourceRoot":""}