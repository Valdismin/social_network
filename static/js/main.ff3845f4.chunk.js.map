{"version":3,"sources":["components/Profile/MyPosts/Post/Post.module.css","api/api.ts","redux/porfile_reducer.tsx","redux/dialogs_reducer.tsx","redux/users_reducer.ts","redux/auth-reducer.ts","redux/app-reducer.ts","redux/redux-store.tsx","components/Navigation/Navigation.tsx","components/Dilogs/DialogsItme/DialogsItem.tsx","components/Dilogs/Message/Message.tsx","hoc/withAuthRedirect.tsx","components/Dilogs/DialogsContainer.tsx","components/Dilogs/Dialogs.tsx","assets/images/user.png","components/Users/Users.tsx","assets/images/preloader_users.svg","components/common/Preloader/preloader.tsx","redux/users-selectors.ts","components/Users/UsersContainer.tsx","components/Profile/ProfileInfo/ProfileStatusWithHooks2.tsx","components/Profile/ProfileInfo/ProfileInfo.tsx","components/Profile/MyPosts/Post/Post.tsx","components/Profile/MyPosts/MyPostsContainer.tsx","components/Profile/MyPosts/MyPosts.tsx","components/Profile/Profile.tsx","components/Profile/ProfileContainer.tsx","components/Header/Header.tsx","components/Header/HeaderContainer.tsx","components/Login/Login.tsx","App.tsx","index.tsx","components/Dilogs/Dialogs.module.css","components/Navigation/Navigation.module.css","components/Header/Header.module.css","components/Profile/MyPosts/MyPosts.module.css","components/Users/users.module.css","components/Profile/ProfileInfo/ProfileInfo.module.css"],"names":["module","exports","ResultCodesEnum","instance","axios","create","baseURL","withCredentials","headers","usersAPI","currentPage","pageSize","get","then","response","data","followAPI","userID","delete","post","authAPI","res","email","password","rememberMe","profileAPI","userId","status","put","initialState","postsData","id","message","likesCount","profile","addPostCreateAction","newPost","type","setStatus","dialogsData","name","messagesData","FOLLOW","UNFOLLOW","SET_USERS","SET_CURRENT_PAGE","SET_TOTAL_USERS_COUNT","TOGGLE_IS_FETCHING","TOGGLE_IS_FOLLOWING_PROGRESS","follow","unfollow","setIsFetching","isFetching","toggleIsFollowingProgress","users","totalUsersCount","followingInProgress","SET_USER_DATA","SET_ERROR","login","isAuth","serverError","setAuthUserData","SET_INITIALIZED","initialized","reducers","combineReducers","postsPropsAll","state","action","NewPost","dialogsPropsAll","NewMessage","newMessageText","usersPage","map","u","followed","filter","auth","error","form","formReducer","app","store","createStore","applyMiddleware","thunk","Navigation","className","classes","nav","item","to","activeClassName","active","itemSettings","DialogItem","props","s","dialog","Message","mapStateToPropsForRedirect","withAuthRedirect","Component","connect","restProps","compose","dispatch","addMessage","addMessageCreateAction","dialogsElements","d","messagesElements","m","formik","useFormik","initialValues","validate","values","errors","length","onSubmit","value","resetForm","dialogs","dialogsItem","messages","handleSubmit","textArea_Button","TextField","label","margin","getFieldProps","Button","variant","color","Users","pagesCount","Math","ceil","pages","i","push","p","styles","selectedPage","onClick","e","onPageChanged","src","photos","small","userPhoto","size","disabled","some","Preloader","style","backgroundColor","preloader","getUsersContainer","getPageSize","getTotalUsersCount","getCurrentPage","getFollowingInProgress","getIsFetching","UsersContainer","pageNumber","setCurrentPage","getUsers","this","getFollow","getUnfollow","React","a","resultCode","items","totalCount","ProfileStatusWithHooks2","useState","editMode","setEditMode","useEffect","toString","onDoubleClick","onChange","currentTarget","autoFocus","onBlur","updateStatus","ProfileInfo","img","description","large","LinearProgress","Post","count_likes","MyPostsContainer","addPost","useDispatch","postElements","postBlock","content","Profile","autorisedUserId","getUserProfile","getStatus","withRouter","match","params","String","Header","header","loginBlock","button","logout","logButton","HeaderContainer","Login","useSelector","test","Success","Grid","container","justify","xs","FormControl","FormGroup","touched","FormControlLabel","control","Checkbox","App","initializeApp","exact","path","render","DialogsContainer","ReactDOM","document","getElementById"],"mappings":"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","file":"static/js/main.ff3845f4.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"item\":\"Post_item__2iIsQ\"};","import axios from \"axios\";\r\n\r\nconst instance = axios.create({\r\n    baseURL:`https://social-network.samuraijs.com/api/1.0/`,\r\n    withCredentials: true,\r\n    headers: {\r\n        \"API-KEY\": \"bc385949-3d41-41a5-85e6-7ba062998611\"\r\n    }\r\n})\r\n\r\nexport const usersAPI = {\r\n    getUsers(currentPage:number,pageSize:number) {\r\n        return instance.get(`users?page=${currentPage}&count=${pageSize}`).then(response => response.data)\r\n    }\r\n}\r\nexport const followAPI={\r\n    unfollow (userID:number) {\r\n        return instance.delete(`follow/${userID}`).then(response => response.data)\r\n    },\r\n    follow(userID:number){\r\n        return instance.post(`follow/${userID}`,{}).then(response => response.data)\r\n    }\r\n}\r\nexport enum ResultCodesEnum {\r\n    Success = 0,\r\n    Error = 1\r\n}\r\n\r\ntype meResponseType = {\r\n    data: { id:number,email:string,login:string },\r\n    resultCode:ResultCodesEnum,\r\n    messages:Array<string>\r\n}\r\ntype loginResponseType = {\r\n    data: { id:number},\r\n    resultCode:ResultCodesEnum,\r\n    messages:Array<string>\r\n}\r\nexport const authAPI={\r\n    me () {\r\n        return  instance.get<meResponseType>(`auth/me`).then(res => res.data)\r\n    },\r\n    login(email:string,password:string,rememberMe = false) {\r\n        return instance.post(`auth/login`,{email,password,rememberMe}).then(response => response.data)\r\n    },\r\n    logout() {\r\n        return instance.delete(`auth/login`)\r\n    }\r\n\r\n}\r\nexport const profileAPI={\r\n    getProfile (userId:string) {\r\n        return  instance.get(`profile/${userId}`).then(response => {\r\n            return response.data})\r\n    },\r\n    getStatus(userId:number) {\r\n        return  instance.get(`profile/status/${userId}`)\r\n    },\r\n    updateStatus(status: string){\r\n        return  instance.put(`profile/status`, {status: status})\r\n    }\r\n}\r\n\r\n\r\n\r\n\r\n\r\n","import {profileAPI} from \"../api/api\";\r\nimport {ThunkAction} from \"redux-thunk\";\r\n\r\nexport type myPostPropsType = {\r\n    id: number\r\n    message: string\r\n    likesCount: number\r\n}\r\nexport type ProfileType = {\r\n    userId: number\r\n    lookingForAJob: boolean\r\n    lookingForAJobDescription: string\r\n    fullName: string\r\n    contacts: ContactsType\r\n    photos: PhotosType\r\n}\r\nexport type ContactsType = {\r\n    github: string | null\r\n    vk: string | null\r\n    facebook: string | null\r\n    instagram: string | null\r\n    twitter: string | null\r\n    website: string | null\r\n    youtube: string | null\r\n    mainLink: string | null\r\n}\r\nexport type PhotosType = { small: string, large: string }\r\nexport type AddPostType = {\r\n    type: \"ADD-POST\",\r\n    newPost: string\r\n}\r\nexport type setUserProfileType = {\r\n    type: \"SET-USER-PROFILE\"\r\n    profile: ProfileType\r\n}\r\nexport type setStatusType = {\r\n    type: \"SET-STATUS\"\r\n    status: string\r\n}\r\n\r\n\r\nexport type dispatchType = AddPostType | setUserProfileType | setStatusType\r\nexport type stateType = typeof initialState\r\nlet initialState = {\r\n    postsData: [\r\n        {id: 1, message: 'Hi,how are you?', likesCount: 12},\r\n        {id: 2, message: 'It is my first post', likesCount: 11},\r\n        {id: 3, message: 'Bonjour', likesCount: 3},\r\n    ],\r\n    profile: null as ProfileType | null,\r\n    status: \"\"\r\n}\r\n\r\n\r\nexport const profileReducer = (state = initialState, action: AddPostType | setUserProfileType | setStatusType): stateType => {\r\n    switch (action.type) {\r\n        case \"ADD-POST\":\r\n            let NewPost: myPostPropsType = {\r\n                id: 5,\r\n                message: action.newPost,\r\n                likesCount: 0\r\n            }\r\n\r\n            return {\r\n                ...state,\r\n                postsData: [...state.postsData, NewPost],\r\n            }\r\n\r\n        case \"SET-USER-PROFILE\":\r\n            return {...state, profile: action.profile}\r\n        case \"SET-STATUS\":\r\n            return {...state, status: action.status}\r\n        default :\r\n            return state\r\n    }\r\n}\r\nexport const addPostCreateAction = (newPost: string): AddPostType => ({\r\n    type: \"ADD-POST\", newPost})as const\r\n\r\nexport const setUserProfile = (profile: ProfileType): setUserProfileType => ({\r\n   type: \"SET-USER-PROFILE\", profile\r\n})as const\r\nexport const setStatus = (status: string): setStatusType => (\r\n    {type: \"SET-STATUS\", status}\r\n) as const\r\n\r\nexport const getUserProfile = (userId: string): ThunkAction<Promise<void>, stateType, unknown, ActionsTypes> => {\r\n    return async (dispatch) => {\r\n        let response = await profileAPI.getProfile(userId)\r\n        dispatch(setUserProfile(response))\r\n    }\r\n}\r\nexport const getStatus = (userId: number): ThunkAction<Promise<void>, stateType, unknown, ActionsTypes> => {\r\n    return async (dispatch) => {\r\n        await profileAPI.getStatus(userId).then(response => dispatch(setStatus(response.data)))\r\n\r\n    }\r\n}\r\nexport const updateStatus = (status: string): ThunkAction<Promise<void>, stateType, unknown, ActionsTypes> => {\r\n    return async (dispatch) => {\r\n        await profileAPI.updateStatus(status).then(response => {\r\n            if (response.data.resultCode === 0) {\r\n                dispatch(setStatus(status))\r\n            }\r\n        })\r\n    }\r\n}\r\n\r\n/*export const updateStatus = (status:string): ThunkAction<Promise<void>, stateType, unknown, ActionsTypes> => (dispatch) => {\r\n    debugger\r\n    profileAPI.updateStatus(status)\r\n        .then(response => {\r\n            if(response.data.resultCode === 0) {\r\n                dispatch(setStatus(status))\r\n            }\r\n        })\r\n}*/\r\n\r\nexport type ActionsTypes =\r\n    ReturnType<typeof addPostCreateAction>\r\n    | ReturnType<typeof setUserProfile>\r\n    | ReturnType<typeof setStatus>\r\n    | ReturnType<typeof setStatus>","type AddMessageType = {\r\n    type: \"ADD-MASSAGE\",\r\n    newMessageText:string\r\n}\r\n\r\nexport type dialogsAllType = {\r\n    dialogsData: Array<dialogsPropsType>\r\n    messagesData: Array<messagePropsType>\r\n}\r\nexport type dialogsPropsType = {\r\n    id: string\r\n    name: string\r\n}\r\nexport type messagePropsType = {\r\n    id: number\r\n    message: string\r\n}\r\n\r\n\r\nexport const addMessageCreateAction = (newMessageText:string): AddMessageType => {\r\n    return {type: \"ADD-MASSAGE\",newMessageText}\r\n}\r\nlet initialState = {\r\n    dialogsData: [\r\n        {id: \"1\", name: \"Vlad\"},\r\n        {id: \"2\", name: \"Dasha\"},\r\n        {id: \"3\", name: \"Anton\"},\r\n        {id: \"4\", name: \"Pasha\"}\r\n    ],\r\n\r\n    messagesData: [\r\n        {id: 1, message: \"Hi\"},\r\n        {id: 2, message: \"Hello\"},\r\n        {id: 3, message: \"Bonjour\"},\r\n    ]\r\n}\r\n\r\nexport const dialogsReducer = (state: dialogsAllType = initialState, action:AddMessageType ) => {\r\n\r\n\r\n    switch (action.type) {\r\n        case \"ADD-MASSAGE\":\r\n            let NewMessage: messagePropsType = {\r\n                id: 4,\r\n                message: action.newMessageText\r\n            }\r\n            return {\r\n                ...state,\r\n                messagesData: [...state.messagesData, NewMessage],\r\n            }\r\n        default:\r\n            return state\r\n    }\r\n}","import {followAPI, usersAPI} from \"../api/api\";\r\nimport {ThunkAction} from \"redux-thunk\";\r\n\r\nconst FOLLOW = \"FOLLOW\"\r\nconst UNFOLLOW = \"UNFOLLOW\"\r\nconst SET_USERS = \"SET_USERS\"\r\nconst SET_CURRENT_PAGE = \"SET_CURRENT_PAGE\"\r\nconst SET_TOTAL_USERS_COUNT = \"SET_TOTAL_USERS_COUNT\"\r\nconst TOGGLE_IS_FETCHING = \"TOGGLE_IS_FETCHING\"\r\nconst TOGGLE_IS_FOLLOWING_PROGRESS = \"TOGGLE_IS_FOLLOWING_PROGRESS\"\r\n\r\nexport type followType = {\r\n    type: \"FOLLOW\"\r\n    userId: number\r\n}\r\nexport type unFollowType = {\r\n    type: \"UNFOLLOW\"\r\n    userId: number\r\n}\r\nexport type setUsersType = {\r\n    type: \"SET_USERS\"\r\n    users: Array<usersDataType>\r\n}\r\nexport type setCurrentPageType = {\r\n    type: \"SET_CURRENT_PAGE\"\r\n    currentPage: number\r\n}\r\nexport type set_total_users_count = {\r\n    type: \"SET_TOTAL_USERS_COUNT\"\r\n    totalUsersCount: number\r\n}\r\nexport type set_is_fetching = {\r\n    type: \"TOGGLE_IS_FETCHING\"\r\n    isFetching: boolean\r\n}\r\nexport type set_is_following_progress = {\r\n    type: \"TOGGLE_IS_FOLLOWING_PROGRESS\"\r\n    isFetching: boolean\r\n    userId: number\r\n}\r\n\r\n\r\nexport const follow = (userId: number): followType => ({type: FOLLOW, userId})\r\nexport const unfollow = (userId: number): unFollowType => ({type: UNFOLLOW, userId})\r\nexport const set_users = (users: Array<usersDataType>): setUsersType => ({type: SET_USERS, users})\r\nexport const setCurrentPage = (currentPage: number): setCurrentPageType => ({type: SET_CURRENT_PAGE, currentPage})\r\nexport const setTotalUsersCount = (totalUsersCount: number): set_total_users_count => ({\r\n    type: SET_TOTAL_USERS_COUNT,\r\n    totalUsersCount\r\n})\r\nexport const setIsFetching = (isFetching: boolean): set_is_fetching => ({\r\n    type: TOGGLE_IS_FETCHING,\r\n    isFetching\r\n})\r\nexport const toggleIsFollowingProgress = (isFetching: boolean, userId: number): set_is_following_progress => ({\r\n    type: TOGGLE_IS_FOLLOWING_PROGRESS,\r\n    isFetching,\r\n    userId\r\n})\r\n\r\nexport type stateType = {\r\n    usersPage: userType\r\n\r\n}\r\nexport type userType = {\r\n    users: Array<usersDataType>,\r\n    pageSize: number,\r\n    totalUsersCount: number,\r\n    currentPage: number,\r\n    isFetching: boolean,\r\n    followingInProgress: Array<number>\r\n}\r\nexport type usersDataType = {\r\n    id: number,\r\n    photos: { small: string, large: string },\r\n    name: string,\r\n    followed: boolean,\r\n    status: string,\r\n    location: { city: string, country: string }\r\n}\r\nexport type dispatchType =\r\n    ReturnType<typeof setIsFetching> |\r\n    ReturnType<typeof set_users> |\r\n    ReturnType<typeof setTotalUsersCount> |\r\n    ReturnType<typeof toggleIsFollowingProgress> |\r\n    ReturnType<typeof follow> |\r\n    ReturnType<typeof unfollow> |\r\n    ReturnType<typeof setCurrentPage>\r\n\r\n\r\nlet initialState = {\r\n    users: [],\r\n    pageSize: 100,\r\n    totalUsersCount: 0,\r\n    currentPage: 1,\r\n    isFetching: false,\r\n    followingInProgress: []\r\n}\r\n\r\n\r\nexport const usersReducer = (state: userType = initialState, action: dispatchType) => {\r\n    switch (action.type) {\r\n        case FOLLOW:\r\n            return {\r\n                ...state, users: state.users.map(u => {\r\n                    if (u.id === action.userId) {\r\n                        return {...u, followed: true}\r\n                    }\r\n                    return u\r\n                })\r\n            }\r\n        case UNFOLLOW:\r\n            return {\r\n                ...state, users: state.users.map(u => {\r\n                    if (u.id === action.userId) {\r\n                        return {...u, followed: false}\r\n                    }\r\n                    return u\r\n                })\r\n            }\r\n        case SET_USERS:\r\n            return {...state, users: action.users}\r\n        case SET_CURRENT_PAGE:\r\n            return {...state, currentPage: action.currentPage}\r\n        case SET_TOTAL_USERS_COUNT:\r\n            return {...state, totalUsersCount: action.totalUsersCount}\r\n        case TOGGLE_IS_FETCHING:\r\n            return {...state, isFetching: action.isFetching}\r\n        case TOGGLE_IS_FOLLOWING_PROGRESS:\r\n            return {\r\n                ...state,\r\n                followingInProgress: action.isFetching ? [...state.followingInProgress, action.userId] : [...state.followingInProgress.filter(id => id != action.userId)]\r\n            }\r\n        default :\r\n            return state\r\n    }\r\n}\r\n\r\ntype ThunkType = ThunkAction<Promise<void>, stateType, unknown, dispatchType>\r\n\r\nexport const getUsers = (currentPage: number, pageSize: number): ThunkType => {\r\n    return async (dispatch) => {\r\n        dispatch(setIsFetching(true))\r\n        let data = await usersAPI.getUsers(currentPage, pageSize)\r\n        dispatch(setIsFetching(false))\r\n        dispatch(set_users(data.items))\r\n        dispatch(setTotalUsersCount(data.totalCount))\r\n    }\r\n}\r\nexport const getFollow = (userId: number): ThunkType => {\r\n    return async (dispatch) => {\r\n        dispatch(toggleIsFollowingProgress(true, userId))\r\n        let data = await followAPI.follow(userId)\r\n        if (data.resultCode === 0) {\r\n            dispatch(follow(userId))\r\n        }\r\n        dispatch(toggleIsFollowingProgress(false, userId))\r\n    }\r\n}\r\nexport const getUnfollow = (userId: number): ThunkType => {\r\n    return async (dispatch) => {\r\n        dispatch(toggleIsFollowingProgress(true, userId))\r\n        let data = await followAPI.unfollow(userId)\r\n        if (data.resultCode === 0) {\r\n            dispatch(unfollow(userId))\r\n        }\r\n        dispatch(toggleIsFollowingProgress(false, userId))\r\n    }\r\n}\r\n","import {authAPI, ResultCodesEnum} from \"../api/api\";\r\nimport {Dispatch} from \"redux\";\r\nimport {ThunkAction} from \"redux-thunk\";\r\nimport {stopSubmit} from \"redux-form\";\r\n\r\nconst SET_USER_DATA = \"SET_USER_DATA\"\r\nconst SET_ERROR = \"SET_ERROR\"\r\n\r\ntype ActionsType = setUserDataType | setErrorDataType\r\n\r\ntype setUserDataType = {\r\n    type: \"SET_USER_DATA\",\r\n    data: {},\r\n    isAuth: boolean\r\n}\r\ntype setErrorDataType = {\r\n    type: \"SET_ERROR\",\r\n    error: string\r\n}\r\nexport type stateType = {\r\n    auth: inStateType\r\n}\r\nexport type inStateType = {\r\n    id: number | null,\r\n    email: string | null,\r\n    login: string | null,\r\n    isAuth: boolean,\r\n    serverError: null | string\r\n}\r\ntype dispatchType = ReturnType<typeof setAuthUserData> | ReturnType<typeof setError>\r\n\r\nlet initialState = {\r\n    id: null,\r\n    email: null,\r\n    login: null,\r\n    isAuth: false,\r\n    serverError: null\r\n}\r\n\r\nexport const authReducer = (state: inStateType = initialState, action: ActionsType) => {\r\n    switch (action.type) {\r\n        case SET_USER_DATA:\r\n            return {\r\n                ...state,\r\n                ...action.data,\r\n                isAuth: action.isAuth,\r\n                serverError: null\r\n            }\r\n        case SET_ERROR:\r\n            return {\r\n                ...state,\r\n                serverError: action.error\r\n            }\r\n        default :\r\n            return state\r\n    }\r\n}\r\n\r\nexport type setUserDataActionType = {\r\n    id: number | null\r\n    email: string | null\r\n    login: string | null\r\n}\r\nexport const setAuthUserData = (data: setUserDataActionType, isAuth: boolean) => ({\r\n    type: SET_USER_DATA,\r\n    data,\r\n    isAuth\r\n} as const)\r\nexport const setError = (error: string) => ({type: \"SET_ERROR\", error} as const)\r\n\r\n\r\nexport const getAuthUserData = (): ThunkAction<void, stateType, unknown, dispatchType> => {\r\n    return (dispatch) => {\r\n        return authAPI.me().then((response) => {\r\n                if (response.resultCode === ResultCodesEnum.Success) {\r\n                    dispatch(setAuthUserData(response.data, true))\r\n                }\r\n            }\r\n        )\r\n    }\r\n}\r\nexport const login = (data: dataType): ThunkAction<void, stateType, unknown, dispatchType> => {\r\n    return async (dispatch) => {\r\n        let response = await authAPI.login(data.email, data.password, data.rememberMe)\r\n        if (response.resultCode === ResultCodesEnum.Success) {\r\n            authAPI.me()\r\n            dispatch(setAuthUserData(response.data.data,true))\r\n        } else {\r\n            let message = response.messages.length > 0 ? response.messages[0] : \"Some error\"\r\n            dispatch(setError(message))\r\n        }\r\n    }\r\n}\r\nexport const logout = (): ThunkAction<Promise<void>, stateType, unknown, dispatchType> => {\r\n    return async (dispatch: Dispatch<dispatchType>) => {\r\n        let response = await authAPI.logout()\r\n        if (response.data.resultCode === 0) {\r\n            dispatch(setAuthUserData({email: null, id: null, login: null}, false))\r\n        }\r\n    }\r\n}\r\n\r\nexport type getAuthUserDataType = ReturnType<typeof getAuthUserData>\r\nexport type dataType = {\r\n    email: string, password: string, rememberMe: boolean\r\n}\r\n","import {ThunkAction} from \"redux-thunk\";\r\nimport {getAuthUserData, getAuthUserDataType} from \"./auth-reducer\";\r\n\r\n\r\n\r\nconst SET_INITIALIZED = \"SET_INITIALIZED\"\r\n\r\n\r\ntype ActionsType = setInitializedSuccessType\r\n\r\ntype setInitializedSuccessType = {\r\n    type: \"SET_INITIALIZED\"\r\n}\r\nexport type inStateType = {\r\n    initialized:boolean\r\n}\r\nexport type stateType = {\r\n    initialize: inStateType\r\n}\r\n//type dispatchType = ReturnType<typeof InitializedSuccess> | getAuthUserDataType\r\n\r\nlet initialState = {\r\n    initialized:false\r\n}\r\n\r\nexport const appReducer = (state: inStateType = initialState, action: ActionsType) => {\r\n    switch (action.type) {\r\n        case SET_INITIALIZED:\r\n            return {\r\n                ...state, initialized:true\r\n            }\r\n        default :\r\n            return state\r\n    }\r\n}\r\n\r\nexport const InitializedSuccess = () => ({\r\n    type: SET_INITIALIZED\r\n}as const)\r\n\r\nexport const initializeApp = ()  => {\r\n    return (dispatch:any) => {\r\n        dispatch(getAuthUserData()).then(() => {\r\n            dispatch(InitializedSuccess())\r\n        })\r\n    }\r\n}\r\n\r\n\r\n","import {applyMiddleware, combineReducers, createStore} from \"redux\";\r\nimport {profileReducer} from \"./porfile_reducer\";\r\nimport {dialogsReducer} from \"./dialogs_reducer\";\r\nimport {usersReducer} from \"./users_reducer\";\r\nimport {authReducer} from \"./auth-reducer\";\r\nimport { reducer as formReducer } from 'redux-form'\r\nimport thunk from \"redux-thunk\";\r\nimport {appReducer} from \"./app-reducer\";\r\n\r\n\r\nlet reducers = combineReducers({\r\n    postsPropsAll:profileReducer,\r\n    dialogsPropsAll:dialogsReducer,\r\n    usersPage:usersReducer,\r\n    auth:authReducer,\r\n    form:formReducer,\r\n    app:appReducer\r\n})\r\n\r\nexport let store = createStore(reducers,applyMiddleware(thunk))\r\n\r\nexport type stateType =  ReturnType<typeof reducers>","import React from \"react\";\r\nimport classes from './Navigation.module.css'\r\nimport {NavLink} from \"react-router-dom\";\r\n\r\n\r\nexport const Navigation = () => {\r\n    return (\r\n        <nav className={classes.nav}>\r\n             <div className={classes.item}>\r\n                <NavLink to='/profile' activeClassName={classes.active}>Profile</NavLink>\r\n            </div>\r\n            <div className={classes.item}>\r\n                <NavLink to='/dialogs' activeClassName={classes.active}>Message</NavLink>\r\n            </div>\r\n            {/*<div className={classes.item}>\r\n                <NavLink to='/news' activeClassName={classes.active}>News</NavLink>\r\n            </div>\r\n            <div className={classes.item}>\r\n                <NavLink to='/music' activeClassName={classes.active}>Music</NavLink>\r\n            </div>*/}\r\n            <div className={classes.itemSettings}>\r\n                <NavLink to='/users' activeClassName={classes.active}>Find Users</NavLink>\r\n            </div>\r\n           {/* <div className={classes.itemSettings}>\r\n                <NavLink to='/settings' activeClassName={classes.active}>Settings</NavLink>\r\n            </div>*/}\r\n        </nav>\r\n    )\r\n}","import React from 'react'\r\nimport s from '../Dialogs.module.css'\r\nimport {NavLink} from 'react-router-dom'\r\n\r\n\r\ntype DialogItemPropsType = {\r\n    name: string,\r\n    id: string\r\n}\r\nexport const DialogItem = (props: DialogItemPropsType) => {\r\n    return (\r\n        <div className={s.dialog + ' ' + s.active}>\r\n            <NavLink to={'/dialogs/' + props.id} activeClassName={s.active}>{props.name}</NavLink>\r\n        </div>\r\n    )\r\n}\r\n\r\n","import React from 'react'\r\nimport s from '../Dialogs.module.css'\r\n\r\n\r\ntype MessagePropsType = {\r\n    message: string\r\n}\r\nexport const Message = (props: MessagePropsType) => {\r\n    return <div className={s.message}>{props.message}</div>\r\n}\r\n\r\n","import React, {ComponentType} from \"react\";\r\nimport {Redirect} from \"react-router-dom\";\r\nimport {connect} from \"react-redux\";\r\nimport {stateType} from \"../redux/redux-store\";\r\n\r\ntype mapStateToPropsForRedirectType = {\r\n    isAuth:boolean\r\n}\r\n\r\nconst mapStateToPropsForRedirect = (state:stateType):mapStateToPropsForRedirectType => {\r\n    return {\r\n        isAuth:state.auth.isAuth\r\n    }\r\n}\r\n\r\nexport function withAuthRedirect <T>(Component:ComponentType<T>)  {\r\n    const RedirectComponent = (props:mapStateToPropsForRedirectType) => {\r\n        let {isAuth,...restProps} = props\r\n            if(!props.isAuth) return <Redirect to='/login' />\r\n            return (\r\n                <Component {...restProps as T}/>)\r\n        }\r\n    return connect(mapStateToPropsForRedirect,{})(RedirectComponent)\r\n\r\n\r\n}","import {addMessageCreateAction} from \"../../redux/dialogs_reducer\";\r\nimport {Dialogs} from \"./Dialogs\";\r\nimport {connect} from \"react-redux\";\r\nimport {AddMessageType} from \"../../redux/store\";\r\nimport {stateType} from \"../../redux/redux-store\";\r\nimport {withAuthRedirect} from \"../../hoc/withAuthRedirect\";\r\nimport {compose} from \"redux\";\r\n\r\n\r\n\r\n\r\nlet mapStateToProps = (state:stateType) => {\r\n    return {\r\n        dialogsPropsAll:state.dialogsPropsAll,\r\n        isAuth:state.auth.isAuth\r\n    }\r\n}\r\nlet mapDispatchToProps = (dispatch:(action: AddMessageType ) => void)=> {\r\n    return {\r\n        addMessage:(newMessageText:string)=>{dispatch(addMessageCreateAction(newMessageText))}\r\n    }\r\n}\r\n\r\nexport default compose(\r\n    connect(mapStateToProps,mapDispatchToProps),\r\n    withAuthRedirect\r\n)(Dialogs) as React.ComponentType\r\n","import React from 'react'\r\nimport s from './Dialogs.module.css'\r\nimport {DialogItem} from \"./DialogsItme/DialogsItem\";\r\nimport {Message} from \"./Message/Message\";\r\nimport {dialogsAllType} from \"../../redux/store\";\r\nimport {useFormik} from \"formik\";\r\n\r\nimport {Button, TextField} from \"@material-ui/core\";\r\n\r\n\r\n\r\nexport type dialogsPropsType2 = {\r\n    addMessage: (newMessageText: string) => void\r\n    dialogsPropsAll: dialogsAllType\r\n    isAuth:boolean\r\n}\r\ntype FormikErrorType = {\r\n    message?: string\r\n}\r\n\r\n\r\nexport const Dialogs = (props: dialogsPropsType2) => {\r\n\r\n    let dialogsElements = props.dialogsPropsAll.dialogsData.map(d => <DialogItem name={d.name} id={d.id}/>);\r\n    let messagesElements = props.dialogsPropsAll.messagesData.map(m => <Message message={m.message}/>)\r\n    const formik = useFormik({\r\n        initialValues:{\r\n            message:''\r\n        },\r\n        validate:(values) => {\r\n            const errors:FormikErrorType={}\r\n            if(values.message.length > 30) {\r\n                errors.message = ''\r\n            }\r\n            return errors\r\n        }\r\n        ,\r\n        onSubmit: value => {\r\n            props.addMessage(value.message)\r\n            formik.resetForm()\r\n        }\r\n    })\r\n\r\n\r\n    return (\r\n        <div className={s.dialogs}>\r\n            <div className={s.dialogsItem}>\r\n                {dialogsElements}\r\n            </div>\r\n            <div className={s.messages}>\r\n                <div>{messagesElements}</div>\r\n                <div>\r\n                    <div>\r\n                        <form onSubmit={formik.handleSubmit}>\r\n                            <div className={s.textArea_Button}>\r\n                                <TextField\r\n                                    label=\"Add message\"\r\n                                    margin=\"normal\"\r\n                                    name=\"message\"\r\n                                    {...formik.getFieldProps('message')}\r\n                                />\r\n                                <Button variant=\"outlined\" type={'submit'}  color={'primary'}>Add message</Button>\r\n                            </div>\r\n                        </form>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n\r\n        </div>\r\n    )\r\n}\r\n","export default __webpack_public_path__ + \"static/media/user.a70779f1.png\";","import React from \"react\";\r\nimport styles from \"./users.module.css\";\r\nimport userPhoto from \"../../assets/images/user.png\";\r\nimport {usersDataType} from \"../../redux/users_reducer\";\r\nimport {NavLink} from \"react-router-dom\";\r\nimport {Button} from \"@material-ui/core\";\r\n\r\n\r\n\r\ntype usersAllType2 = {\r\n    users: Array<usersDataType>\r\n    follow: (userId: number) => void\r\n    unfollow: (userId: number) => void\r\n    pageSize: number\r\n    currentPage: number\r\n    totalUsersCount: number\r\n    onPageChanged: (pageNumber: number) => void\r\n    followingInProgress: Array<number>\r\n    toggleIsFollowingProgress: (isFetching: boolean, userId: number) => void\r\n}\r\n\r\nexport const Users = (props: usersAllType2) => {\r\n    let pagesCount = Math.ceil(props.totalUsersCount / props.pageSize)\r\n\r\n    let pages = []\r\n    for (let i = 1; i <= pagesCount; ++i) {\r\n        pages.push(i)\r\n    }\r\n    return <div>\r\n        <div>\r\n            {pages.map(p => {\r\n                // @ts-ignore\r\n                return <span className={props.currentPage === p && styles.selectedPage}\r\n                             onClick={(e) => {\r\n                                 props.onPageChanged(p)\r\n                             }}>{p}</span>\r\n            })}\r\n        </div>\r\n        {\r\n            props.users.map(u => <div key={u.id}>\r\n            <span>\r\n               <div>\r\n                   <NavLink to={\"profile/\" + u.id}>\r\n                  <img src={u.photos.small != null ? u.photos.small : userPhoto} className={styles.userPhoto}/>\r\n                   </NavLink>\r\n               </div>\r\n                <div>\r\n                    {u.followed ? <Button variant=\"contained\" size=\"small\" color=\"primary\" disabled={props.followingInProgress.some(id => id === u.id)}\r\n                                          onClick={() => {\r\n                                              props.unfollow(u.id)\r\n                                          }}\r\n                        >Unfollow</Button>\r\n\r\n                        :\r\n\r\n                        <Button variant=\"contained\" size=\"small\" color=\"primary\" disabled={props.followingInProgress.some(id => id === u.id)}\r\n                                onClick={() => {\r\n                                    props.follow(u.id)\r\n                                }}\r\n                        >Follow</Button>}\r\n                </div>\r\n            </span>\r\n                    <span>\r\n                    <span>\r\n                        <div>{u.name}</div>\r\n                        <div>{u.status}</div>\r\n                    </span>\r\n                    <span>\r\n                        <div>{\"u.location.country\"}</div>\r\n                        <div>{\"u.location.city\"}</div>\r\n                    </span>\r\n                </span>\r\n                </div>\r\n            )\r\n        }\r\n    </div>\r\n}","export default __webpack_public_path__ + \"static/media/preloader_users.aed4c9cc.svg\";","import React from \"react\";\r\nimport preloader from \"../../../assets/images/preloader_users.svg\"\r\n\r\nexport const Preloader = (props:any) => {\r\n    return <div style={{backgroundColor : 'white'}}>\r\n    <img src={preloader}/>\r\n    </div>\r\n}","import { stateType } from '../redux/redux-store';\r\n\r\nexport const getUsersContainer = (state:stateType)=> {\r\n    return state.usersPage.users\r\n}\r\nexport const getPageSize = (state:stateType)=> {\r\n    return state.usersPage.pageSize\r\n}\r\nexport const getTotalUsersCount = (state:stateType)=> {\r\n    return state.usersPage.totalUsersCount\r\n}\r\nexport const getCurrentPage = (state:stateType)=> {\r\n    return state.usersPage.currentPage\r\n}\r\nexport const getFollowingInProgress = (state:stateType)=> {\r\n    return state.usersPage.followingInProgress\r\n}\r\nexport const getIsFetching = (state:stateType)=> {\r\n    return state.usersPage.isFetching\r\n}","import React from 'react'\r\nimport {connect} from \"react-redux\";\r\nimport {\r\n    setCurrentPage,\r\n    usersDataType, toggleIsFollowingProgress, getUsers, getFollow, getUnfollow\r\n} from \"../../redux/users_reducer\";\r\nimport {Users} from \"./Users\";\r\nimport {Preloader} from \"../common/Preloader/preloader\";\r\nimport {withAuthRedirect} from \"../../hoc/withAuthRedirect\";\r\nimport {compose} from \"redux\";\r\nimport { stateType } from '../../redux/redux-store';\r\nimport {\r\n    getCurrentPage,\r\n    getFollowingInProgress, getIsFetching,\r\n    getPageSize,\r\n    getTotalUsersCount,\r\n    getUsersContainer\r\n} from \"../../redux/users-selectors\";\r\n\r\ntype usersAllType = {\r\n    users: Array<usersDataType>\r\n    getFollow: (userId: number) => void\r\n    getUnfollow: (userId: number) => void\r\n    pageSize: number\r\n    currentPage: number\r\n    setCurrentPage: (currentPage: number) => void\r\n    totalUsersCount: number\r\n    toggleIsFollowingProgress: (isFetching: boolean,userId:number) => void\r\n    isFetching: boolean\r\n    followingInProgress: Array<number>\r\n    getUsers:(currentPage:number,pageSize:number) => void\r\n}\r\n\r\nexport class UsersContainer extends React.Component<usersAllType> {\r\n\r\n    componentDidMount() {\r\n        this.props.getUsers(this.props.currentPage,this.props.pageSize)\r\n    }\r\n\r\n    onPageChanged = (pageNumber: number) => {\r\n        this.props.setCurrentPage(pageNumber)\r\n        this.props.getUsers(pageNumber,this.props.pageSize)\r\n    }\r\n\r\n    render() {\r\n        return <>\r\n            {this.props.isFetching ? <Preloader/> :\r\n            <Users totalUsersCount={this.props.totalUsersCount}\r\n                   pageSize={this.props.pageSize}\r\n                   currentPage={this.props.currentPage}\r\n                   onPageChanged={this.onPageChanged}\r\n                   users={this.props.users}\r\n                   follow={this.props.getFollow}\r\n                   unfollow={this.props.getUnfollow}\r\n                   followingInProgress={this.props.followingInProgress}\r\n                   toggleIsFollowingProgress={this.props.toggleIsFollowingProgress}/>}\r\n        </>\r\n    }\r\n}\r\n\r\nlet mapStateToProps = (state: stateType) => {\r\n    return {\r\n        users: getUsersContainer(state),\r\n        pageSize: getPageSize(state),\r\n        totalUsersCount: getTotalUsersCount(state),\r\n        currentPage: getCurrentPage(state),\r\n        isFetching: getIsFetching(state),\r\n        followingInProgress: getFollowingInProgress(state)\r\n\r\n    }\r\n}\r\n\r\nexport default compose(\r\n    connect(mapStateToProps, {\r\n        getFollow,\r\n        getUnfollow,\r\n        setCurrentPage,\r\n        toggleIsFollowingProgress,\r\n        getUsers\r\n    }),\r\n    withAuthRedirect\r\n)(UsersContainer) as React.ComponentType\r\n","import React, {ChangeEvent, useEffect, useState} from 'react';\r\n\r\ntype ProfileStatusPropstype = {\r\n    status: string | null\r\n    updateStatus: (status: string) => void\r\n}\r\n\r\nexport const ProfileStatusWithHooks2: React.FC<ProfileStatusPropstype> = (props) =>  {\r\n\r\n    let [editMode, setEditMode] = useState(false)\r\n    let [status, setStatus] = useState(props.status)\r\n\r\n    useEffect(() => {\r\n        if(props.status)  setStatus((props.status).toString())\r\n    },[props.status])\r\n\r\n    const activateEditMode = () => {\r\n        setEditMode(true)\r\n    }\r\n\r\n    const deactivateEditMode = () => {\r\n        setEditMode(false)\r\n        if(status) {\r\n            props.updateStatus(status)\r\n        }\r\n    }\r\n\r\n    const onStatusChange = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setStatus(e.currentTarget.value)\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            { !editMode &&\r\n            <div>\r\n                <span onDoubleClick={activateEditMode}>{!props.status ? status : props.status}</span>\r\n            </div>}\r\n            { editMode &&\r\n            <div>\r\n                <input onChange={onStatusChange} autoFocus onBlur={deactivateEditMode}\r\n                       value={status ? status : '----'} />\r\n            </div>}\r\n        </div>\r\n    )\r\n}\r\n\r\n","import React from \"react\";\r\nimport s from './ProfileInfo.module.css'\r\nimport {ProfileType} from \"../../../redux/porfile_reducer\";\r\nimport {ProfileStatusWithHooks2} from \"./ProfileStatusWithHooks2\";\r\nimport {LinearProgress} from \"@material-ui/core\";\r\n\r\ntype profileInfoType = {\r\n    profile:ProfileType | null,\r\n    status:string| null,\r\n    updateStatus : (status:string) => void\r\n}\r\n\r\nexport const ProfileInfo = (props:profileInfoType) => {\r\n\r\n    if(!props.profile || !props.status) {\r\n        return <LinearProgress />\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <div className={s.img}>\r\n               {/* <img\r\n                    src='https://dbijapkm3o6fj.cloudfront.net/resources/20611,1004,1,6,4,0,960,330/-3842-/20161013141806/image-gallery.jpeg'\r\n                    alt='Main image'/>*/}\r\n            </div>\r\n            <div className={s.description}>\r\n                <img src={props.profile.photos.large}/>\r\n                <ProfileStatusWithHooks2 status={props.status} updateStatus={props.updateStatus} />\r\n            </div>\r\n        </div>\r\n    )\r\n}","import React from \"react\";\r\nimport s from './Post.module.css'\r\n\r\ntype PropsPost = {\r\n    message: string\r\n    count_likes: number\r\n}\r\n\r\nexport const Post : React.FC<PropsPost> = (props) => {\r\n    return (\r\n        <div className={s.item}>\r\n            <img src='https://www.interfax.ru/ftproot/photos/photostory/2019/07/09/week4_700.jpg'/>\r\n            {props.message}\r\n            <div>\r\n                <span>{props.count_likes} Like</span>\r\n            </div>\r\n        </div>\r\n    )\r\n}","\r\nimport {addPostCreateAction} from \"../../../redux/porfile_reducer\";\r\nimport {MyPosts} from \"./MyPosts\";\r\nimport {AddPostType} from \"../../../redux/store\";\r\nimport {connect} from \"react-redux\";\r\nimport {stateType} from \"../../../redux/redux-store\";\r\n\r\n\r\nlet mapStateToProps = (state:stateType) => {\r\n    return {\r\n        postsPropsAll:state.postsPropsAll\r\n    }\r\n}\r\nlet mapDispatchToProps = (dispatch:(action: AddPostType ) => void)=> {\r\n    return {\r\n        addPost:(newPost:string)=>{dispatch(addPostCreateAction(newPost))}\r\n    }\r\n}\r\n\r\nexport const MyPostsContainer = connect(mapStateToProps,mapDispatchToProps)(MyPosts)","import React from \"react\";\r\nimport s from './MyPosts.module.css'\r\nimport {Post} from \"./Post/Post\";\r\nimport {addPostCreateAction, stateType} from \"../../../redux/porfile_reducer\";\r\nimport {useFormik} from \"formik\";\r\nimport {useDispatch} from \"react-redux\";\r\nimport {Button, TextField} from \"@material-ui/core\";\r\n\r\n\r\n\r\n\r\ntype postsAllType = {\r\n    postsPropsAll: stateType\r\n}\r\ntype FormikErrorType = {\r\n    post?: string\r\n}\r\n\r\n\r\nexport const MyPosts = (props: postsAllType) => {\r\n    const dispatch = useDispatch()\r\n    const formik = useFormik({\r\n        initialValues: {\r\n            post: ''\r\n        },\r\n        validate: (values) => {\r\n            const errors: FormikErrorType = {};\r\n            if (values.post.length > 50) {\r\n                errors.post = '';\r\n            }\r\n            return errors;\r\n        },\r\n        onSubmit: value => {\r\n            dispatch(addPostCreateAction(value.post))\r\n            formik.resetForm()\r\n        }\r\n    })\r\n\r\n    let postElements = props.postsPropsAll.postsData.map(p => <Post message={p.message} count_likes={p.likesCount}/>)\r\n\r\n    return (\r\n        <div className={s.postBlock}>\r\n            <h3>My posts</h3>\r\n            <form onSubmit={formik.handleSubmit}>\r\n                <div className={s.textArea_Button}>\r\n                <TextField\r\n                    label=\"Create Post\"\r\n                    margin=\"normal\"\r\n                    name=\"post\"\r\n                    {...formik.getFieldProps('post')}\r\n                />\r\n                <Button type={'submit'} variant=\"outlined\" color={'primary'}>Add post</Button>\r\n                </div>\r\n            </form>\r\n            <div className={s.content}>\r\n                {postElements}\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\n","import React from \"react\";\r\nimport {ProfileInfo} from \"./ProfileInfo/ProfileInfo\";\r\nimport {MyPostsContainer} from \"./MyPosts/MyPostsContainer\";\r\nimport {ProfileType, updateStatus} from \"../../redux/porfile_reducer\";\r\n\r\n\r\ntype profilePropsType = {\r\n    profile:ProfileType | null,\r\n    status:string | null,\r\n    updateStatus : (status:string) => void\r\n}\r\n\r\nexport const Profile = (props:profilePropsType) => {\r\n\r\n    return (\r\n        <div>\r\n            <ProfileInfo profile={props.profile} status = {props.status} updateStatus={props.updateStatus}/>\r\n            <MyPostsContainer/>\r\n        </div>\r\n    )\r\n}","import React, {useEffect} from \"react\";\r\nimport {Profile} from \"./Profile\";\r\nimport {connect} from \"react-redux\";\r\nimport {getStatus, getUserProfile, ProfileType, updateStatus} from \"../../redux/porfile_reducer\";\r\nimport {withRouter, RouteComponentProps} from \"react-router-dom\";\r\nimport {stateType} from \"../../redux/redux-store\";\r\nimport {withAuthRedirect} from \"../../hoc/withAuthRedirect\";\r\nimport {compose} from \"redux\";\r\n\r\ntype mapStateToPropsType = {\r\n    profile: null | ProfileType\r\n    status:string| null,\r\n    autorisedUserId:number | null,\r\n}\r\ntype pathParamsType = {\r\n    userId: string\r\n}\r\ntype mapDispatchToPropsType = {\r\n    updateStatus: (status: string) => void\r\n    getUserProfile: (userId: string) => void\r\n    getStatus: (userId: number) => void\r\n}\r\ntype ownPropsType = mapStateToPropsType & mapDispatchToPropsType\r\ntype PropsType = RouteComponentProps<pathParamsType> & ownPropsType\r\n\r\n\r\nconst ProfileContainer = (props: PropsType) => {\r\n    let userId = props.match.params.userId\r\n    useEffect(() => {\r\n        if (!userId) {\r\n            userId = String(props.autorisedUserId)\r\n        }\r\n        props.getUserProfile(userId)\r\n    },[])\r\n\r\n    if (props.profile) {\r\n        props.getStatus(props.profile.userId)\r\n    }\r\n    return (\r\n        <Profile profile={props.profile} status = {props.status} updateStatus={props.updateStatus}/>)\r\n}\r\n\r\nlet mapStateToProps = (state: stateType): mapStateToPropsType => {\r\n    return {\r\n        profile: state.postsPropsAll.profile,\r\n        status:state.postsPropsAll.status,\r\n        autorisedUserId:state.auth.id,\r\n    }\r\n}\r\n\r\n\r\nexport default compose(\r\n    connect(mapStateToProps, {getUserProfile,getStatus,updateStatus}),\r\n    withRouter,\r\n    withAuthRedirect\r\n)(ProfileContainer) as React.ComponentType","import React from \"react\";\r\nimport s from './Header.module.css'\r\nimport {NavLink} from \"react-router-dom\";\r\nimport { Button } from \"@material-ui/core\";\r\n\r\n\r\ntype propsType = {\r\n    isAuth:boolean,\r\n    login:string|null,\r\n    logout:() => void\r\n}\r\n\r\nexport const Header = (props:propsType) => {\r\n    return (\r\n        <header className={s.header}>\r\n                <div className={s.loginBlock}>\r\n                    {props.isAuth\r\n                        ? <div>{props.login} - <Button className={s.button} onClick={props.logout}>Log out</Button></div>\r\n                        : <button><NavLink className={s.logButton} to={'/login'}>Login</NavLink></button>}\r\n                </div>\r\n        </header>\r\n    )\r\n}","import React from \"react\";\r\nimport {Header} from \"./Header\";\r\nimport {connect} from \"react-redux\";\r\nimport {logout, stateType} from \"../../redux/auth-reducer\";\r\n\r\n\r\n\r\ntype mapDispatchToPropsType = {\r\n    logout:() => void\r\n}\r\ntype mapStateToPropsType = {\r\n    isAuth:boolean,\r\n    login:string | null\r\n}\r\ntype PropsType = mapDispatchToPropsType & mapStateToPropsType\r\n\r\nexport class HeaderContainer extends React.Component<PropsType> {\r\n\r\n\r\n    render() {\r\n        return <Header isAuth={this.props.isAuth} login={this.props.login} logout={this.props.logout} />\r\n    }\r\n}\r\n\r\nlet mapStateToProps = (state: stateType) => {\r\n    return {\r\n        isAuth: state.auth.isAuth,\r\n        login: state.auth.login\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, {logout})(HeaderContainer)","import React, {useEffect} from 'react';\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {login} from \"../../redux/auth-reducer\";\r\nimport {stateType} from \"../../redux/redux-store\";\r\nimport {Redirect} from 'react-router-dom';\r\nimport {useFormik} from \"formik\";\r\nimport {Button, Checkbox, FormControl, FormControlLabel, FormGroup, Grid, TextField} from \"@material-ui/core\";\r\n\r\n\r\n\r\ntype FormikErrorType = {\r\n    email?: string\r\n    password?: string\r\n    rememberMe?: boolean\r\n}\r\n\r\n\r\nexport const Login = () => {\r\n\r\n    const isAuth = useSelector<stateType>(state => state.auth.isAuth)\r\n    const dispatch = useDispatch()\r\n\r\n    const formik = useFormik({\r\n        initialValues: {\r\n            email: '',\r\n            password: '',\r\n            rememberMe: false\r\n        },\r\n        validate: (values) => {\r\n            const errors: FormikErrorType = {};\r\n            if (!values.email) {\r\n                errors.email = 'Email Required!';\r\n            } else if (!/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(values.email)) {\r\n                errors.email = 'Invalid email address';\r\n            }\r\n            if (!values.password) {\r\n                errors.password = 'Password Required!'\r\n            } else if (values.password.length < 3) {\r\n                errors.password = 'Password must be more than 2 symbols!'\r\n            }\r\n            return errors;\r\n        },\r\n        onSubmit: value => {\r\n            dispatch(login(value))\r\n            formik.resetForm()\r\n        }\r\n    })\r\n\r\n        if (isAuth) {\r\n            return <Redirect to={\"/profile\"}/>\r\n        }\r\n\r\n\r\n\r\n    return <Grid container justify=\"center\">\r\n        <Grid item xs={4}>\r\n            <form onSubmit={formik.handleSubmit}>\r\n                <FormControl>\r\n                    <FormGroup>\r\n                        <TextField\r\n                            label=\"Email\"\r\n                            margin=\"normal\"\r\n                            name=\"email\"\r\n                            {...formik.getFieldProps('email')}\r\n                        />\r\n                        {formik.touched.email &&\r\n                        formik.errors.email ? <div style={{color: \"red\"}}>{formik.errors.email}</div> : null}\r\n                        <TextField\r\n                            type=\"password\"\r\n                            label=\"Password\"\r\n                            margin=\"normal\"\r\n                            name=\"password\"\r\n                            {...formik.getFieldProps('password')}\r\n                        />\r\n                        {formik.touched.password &&\r\n                        formik.errors.password ? <div style={{color: \"red\"}}>{formik.errors.password}</div> : null}\r\n                        <FormControlLabel\r\n                            name=\"rememberMe\"\r\n                            label={\"Remember me\"}\r\n                            {...formik.getFieldProps('rememberMe')}\r\n                            control={<Checkbox/>}\r\n                        />\r\n                        <Button type={'submit'} variant={'contained'} color={'primary'}>Login</Button>\r\n                    </FormGroup>\r\n                </FormControl>\r\n            </form>\r\n        </Grid>\r\n    </Grid>\r\n}","import React from 'react';\r\nimport './App.css';\r\nimport {Navigation} from \"./components/Navigation/Navigation\";\r\nimport {Route, withRouter} from \"react-router-dom\";\r\nimport DialogsContainer from \"./components/Dilogs/DialogsContainer\";\r\nimport UsersContainer from \"./components/Users/UsersContainer\";\r\nimport ProfileContainer from \"./components/Profile/ProfileContainer\";\r\nimport HeaderContainer from \"./components/Header/HeaderContainer\";\r\nimport {Login} from \"./components/Login/Login\";\r\nimport {connect} from \"react-redux\";\r\nimport {compose} from \"redux\";\r\nimport {initializeApp} from \"./redux/app-reducer\";\r\nimport {stateType} from \"./redux/redux-store\";\r\nimport {Preloader} from \"./components/common/Preloader/preloader\";\r\n\r\nclass App extends React.Component<PropsType> {\r\n\r\n    componentDidMount() {\r\n        this.props.initializeApp()\r\n    }\r\n\r\n    render() {\r\n        if (!this.props.initialized) {\r\n            return <Preloader/>\r\n        }\r\n\r\n\r\n        return (\r\n\r\n            <div className='app-wrapper'>\r\n                <HeaderContainer/>\r\n                <Navigation/>\r\n                <div className='app-wrapper-content'>\r\n                    <Route exact path={'/'} render={() => <ProfileContainer/>}/>\r\n                    <Route path='/dialogs' render={() => <DialogsContainer/>}/>\r\n                    <Route path='/profile/:userId?' render={() => <ProfileContainer/>}/>\r\n                    {/*  <Route path='/news' render={() => News}/>\r\n                    <Route path='/music' render={() => Music}/>*/}\r\n                    {/* <Route path='/settings' render={() => Settings}/>*/}\r\n                    <Route path='/users' render={() => <UsersContainer/>}/>\r\n                    <Route path='/login' render={() => <Login/>}/>\r\n                </div>\r\n            </div>\r\n\r\n\r\n        )\r\n    }\r\n}\r\n\r\nconst MapStateToProps = (state: stateType): MapStateType => {\r\n    return {\r\n        initialized: state.app.initialized\r\n    }\r\n}\r\n\r\ntype MapStateType = {\r\n    initialized: boolean\r\n}\r\n\r\ntype MapDispatchPropsType = {\r\n    initializeApp: () => void\r\n}\r\n\r\ntype PropsType = MapStateType & MapDispatchPropsType\r\n\r\nexport default compose<React.ComponentType>(\r\n    withRouter,\r\n    connect<MapStateType, MapDispatchPropsType, {}, stateType>(MapStateToProps, {initializeApp}))(App);","import React from 'react';\nimport './index.css';\nimport {store} from \"./redux/redux-store\";\nimport ReactDOM from \"react-dom\";\nimport {BrowserRouter} from \"react-router-dom\";\nimport App from './App'\nimport {Provider} from \"react-redux\";\n\n\nReactDOM.render(\n\n        <BrowserRouter>\n            <Provider store={store}>\n            <App />\n            </Provider>\n        </BrowserRouter>,\n    document.getElementById('root')\n)\n\n\n\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"dialogs\":\"Dialogs_dialogs__2yaZY\",\"dialogsItem\":\"Dialogs_dialogsItem__41GdX\",\"active\":\"Dialogs_active__i8E9B\",\"messages\":\"Dialogs_messages__1nWHq\",\"textArea_Button\":\"Dialogs_textArea_Button__29UBz\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"nav\":\"Navigation_nav__2PkAl\",\"item\":\"Navigation_item__2Gs4w\",\"itemSettings\":\"Navigation_itemSettings__3EItE\",\"friends\":\"Navigation_friends__kI6O8\",\"active\":\"Navigation_active__3MhZN\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"header\":\"Header_header__39c1E\",\"loginBlock\":\"Header_loginBlock__qiKS_\",\"button\":\"Header_button__jLhxs\",\"logButton\":\"Header_logButton__QZ-io\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"textArea_Button\":\"MyPosts_textArea_Button__3ZlzN\",\"item\":\"MyPosts_item__1q-8z\",\"postBlock\":\"MyPosts_postBlock__1oaMi\",\"content\":\"MyPosts_content__Z9JiK\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"userPhoto\":\"users_userPhoto__1Zlhn\",\"selectedPage\":\"users_selectedPage__3I3eN\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"content\":\"ProfileInfo_content__2ztCb\",\"description\":\"ProfileInfo_description__fTi3M\"};"],"sourceRoot":""}