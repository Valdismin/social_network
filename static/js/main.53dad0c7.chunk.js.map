{"version":3,"sources":["redux/dialogs_reducer.tsx","api/api.ts","redux/users_reducer.ts","redux/auth-reducer.ts","redux/app-reducer.ts","redux/redux-store.tsx","components/Navigation/Navigation.tsx","assets/images/user.png","components/common/Paginator/Paginator.tsx","components/Users/Users.tsx","redux/users-selectors.ts","components/Users/UsersContainer.tsx","components/Header/Header.tsx","components/Header/HeaderContainer.tsx","components/Login/Login.tsx","hoc/withSuspence.tsx","App.tsx","index.tsx","components/Navigation/Navigation.module.css","components/Users/users.module.css","components/Header/Header.module.css","components/common/Paginator/Paginator.module.css","redux/porfile_reducer.tsx","hoc/withAuthRedirect.tsx"],"names":["addMessageCreateAction","newMessageText","type","initialState","dialogsData","id","name","messagesData","message","dialogsReducer","state","action","NewMessage","ResultCodesEnum","instance","axios","create","baseURL","withCredentials","headers","usersAPI","getUsers","currentPage","pageSize","get","then","response","data","followAPI","unfollow","userID","delete","follow","post","authAPI","me","res","login","email","password","rememberMe","logout","profileAPI","getProfile","userId","getStatus","updateStatus","status","put","FOLLOW","UNFOLLOW","SET_USERS","SET_CURRENT_PAGE","SET_TOTAL_USERS_COUNT","TOGGLE_IS_FETCHING","TOGGLE_IS_FOLLOWING_PROGRESS","setIsFetching","isFetching","toggleIsFollowingProgress","users","totalUsersCount","followingInProgress","followUnfollowFlow","dispatch","apiMethod","actionCreator","a","resultCode","SET_USER_DATA","SET_ERROR","isAuth","serverError","setAuthUserData","SET_INITIALIZED","initialized","reducers","combineReducers","postsPropsAll","profileReducer","dialogsPropsAll","usersPage","map","u","followed","filter","auth","error","form","formReducer","app","composeEnhancers","window","compose","store","createStore","applyMiddleware","thunk","Navigation","className","classes","nav","buttons","item","to","activeClassName","active","itemSettings","Paginator","totalItemsCount","onPageChanged","portionSize","pagesCount","Math","ceil","pages","i","push","portionCount","useState","portionNumber","setPortionNumber","leftPortionPageNumber","rightPortionPageNumber","styles","main","onClick","p","selectedPage","e","Users","props","usersWrapper","user","key","src","photos","small","userPhoto","Button","variant","size","color","disabled","some","getUsersContainer","getPageSize","getTotalUsersCount","getCurrentPage","getFollowingInProgress","getIsFetching","UsersContainer","pageNumber","setCurrentPage","this","LinearProgress","getFollow","getUnfollow","React","Component","connect","bind","items","totalCount","withAuthRedirect","Header","s","header","loginBlock","button","logButton","HeaderContainer","Login","useSelector","useDispatch","formik","useFormik","initialValues","validate","values","errors","test","length","onSubmit","value","Success","messages","resetForm","Grid","container","justify","xs","handleSubmit","FormControl","FormGroup","TextField","label","margin","getFieldProps","touched","style","FormControlLabel","control","Checkbox","withSuspense","Suspense","fallback","ProfileContainer","lazy","SuspendedDialogs","SuspendedProfile","App","initializeApp","exact","path","render","withRouter","ReactDOM","document","getElementById","module","exports","postsData","likesCount","profile","NewPost","newPost","postId","addPostCreateAction","setStatus","getUserProfile","mapStateToPropsForRedirect","restProps"],"mappings":"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","file":"static/js/main.53dad0c7.chunk.js","sourcesContent":["type AddMessageType = {\r\n    type: \"ADD-MASSAGE\",\r\n    newMessageText:string\r\n}\r\n\r\nexport type dialogsAllType = {\r\n    dialogsData: Array<dialogsPropsType>\r\n    messagesData: Array<messagePropsType>\r\n}\r\nexport type dialogsPropsType = {\r\n    id: string\r\n    name: string\r\n}\r\nexport type messagePropsType = {\r\n    id: number\r\n    message: string\r\n}\r\n\r\n\r\nexport const addMessageCreateAction = (newMessageText:string): AddMessageType => {\r\n    return {type: \"ADD-MASSAGE\",newMessageText}\r\n}\r\nlet initialState = {\r\n    dialogsData: [\r\n        {id: \"1\", name: \"Vlad\"},\r\n        {id: \"2\", name: \"Dasha\"},\r\n        {id: \"3\", name: \"Anton\"},\r\n        {id: \"4\", name: \"Pasha\"}\r\n    ],\r\n\r\n    messagesData: [\r\n        {id: 1, message: \"Hi\"},\r\n        {id: 2, message: \"Hello\"},\r\n        {id: 3, message: \"Bonjour\"},\r\n    ]\r\n}\r\n\r\nexport const dialogsReducer = (state: dialogsAllType = initialState, action:AddMessageType ) => {\r\n\r\n\r\n    switch (action.type) {\r\n        case \"ADD-MASSAGE\":\r\n            let NewMessage: messagePropsType = {\r\n                id: 4,\r\n                message: action.newMessageText\r\n            }\r\n            return {\r\n                ...state,\r\n                messagesData: [...state.messagesData, NewMessage],\r\n            }\r\n        default:\r\n            return state\r\n    }\r\n}","import axios from \"axios\";\r\n\r\nconst instance = axios.create({\r\n    baseURL:`https://social-network.samuraijs.com/api/1.0/`,\r\n    withCredentials: true,\r\n    headers: {\r\n        \"API-KEY\": \"bc385949-3d41-41a5-85e6-7ba062998611\"\r\n    }\r\n})\r\n\r\nexport const usersAPI = {\r\n    getUsers(currentPage:number,pageSize:number) {\r\n        return instance.get(`users?page=${currentPage}&count=${pageSize}`).then(response => response.data)\r\n    }\r\n}\r\nexport const followAPI={\r\n    unfollow (userID:number) {\r\n        return instance.delete(`follow/${userID}`).then(response => response.data)\r\n    },\r\n    follow(userID:number){\r\n        return instance.post(`follow/${userID}`,{}).then(response => response.data)\r\n    }\r\n}\r\nexport enum ResultCodesEnum {\r\n    Success = 0,\r\n    Error = 1\r\n}\r\n\r\ntype meResponseType = {\r\n    data: { id:number,email:string,login:string },\r\n    resultCode:ResultCodesEnum,\r\n    messages:Array<string>\r\n}\r\ntype loginResponseType = {\r\n    data: { id:number},\r\n    resultCode:ResultCodesEnum,\r\n    messages:Array<string>\r\n}\r\nexport const authAPI={\r\n    me () {\r\n        return  instance.get<meResponseType>(`auth/me`).then(res => res.data)\r\n    },\r\n    login(email:string,password:string,rememberMe = false) {\r\n        return instance.post(`auth/login`,{email,password,rememberMe}).then(response => response.data)\r\n    },\r\n    logout() {\r\n        return instance.delete(`auth/login`)\r\n    }\r\n\r\n}\r\nexport const profileAPI={\r\n    getProfile (userId:string) {\r\n        return  instance.get(`profile/${userId}`).then(response => {\r\n            return response.data})\r\n    },\r\n    getStatus(userId:number) {\r\n        return  instance.get(`profile/status/${userId}`)\r\n    },\r\n    updateStatus(status: string){\r\n        return  instance.put(`profile/status`, {status: status})\r\n    }\r\n}\r\n\r\n\r\n\r\n\r\n\r\n","import {followAPI, usersAPI} from \"../api/api\";\r\nimport {ThunkAction} from \"redux-thunk\";\r\n\r\nconst FOLLOW = \"FOLLOW\"\r\nconst UNFOLLOW = \"UNFOLLOW\"\r\nconst SET_USERS = \"SET_USERS\"\r\nconst SET_CURRENT_PAGE = \"SET_CURRENT_PAGE\"\r\nconst SET_TOTAL_USERS_COUNT = \"SET_TOTAL_USERS_COUNT\"\r\nconst TOGGLE_IS_FETCHING = \"TOGGLE_IS_FETCHING\"\r\nconst TOGGLE_IS_FOLLOWING_PROGRESS = \"TOGGLE_IS_FOLLOWING_PROGRESS\"\r\n\r\nexport type followType = {\r\n    type: \"FOLLOW\"\r\n    userId: number\r\n}\r\nexport type unFollowType = {\r\n    type: \"UNFOLLOW\"\r\n    userId: number\r\n}\r\nexport type setUsersType = {\r\n    type: \"SET_USERS\"\r\n    users: Array<usersDataType>\r\n}\r\nexport type setCurrentPageType = {\r\n    type: \"SET_CURRENT_PAGE\"\r\n    currentPage: number\r\n}\r\nexport type set_total_users_count = {\r\n    type: \"SET_TOTAL_USERS_COUNT\"\r\n    totalUsersCount: number\r\n}\r\nexport type set_is_fetching = {\r\n    type: \"TOGGLE_IS_FETCHING\"\r\n    isFetching: boolean\r\n}\r\nexport type set_is_following_progress = {\r\n    type: \"TOGGLE_IS_FOLLOWING_PROGRESS\"\r\n    isFetching: boolean\r\n    userId: number\r\n}\r\n\r\n\r\nexport const follow = (userId: number): followType => ({type: FOLLOW, userId})\r\nexport const unfollow = (userId: number): unFollowType => ({type: UNFOLLOW, userId})\r\nexport const set_users = (users: Array<usersDataType>): setUsersType => ({type: SET_USERS, users})\r\nexport const setCurrentPage = (currentPage: number): setCurrentPageType => ({type: SET_CURRENT_PAGE, currentPage})\r\nexport const setTotalUsersCount = (totalUsersCount: number): set_total_users_count => ({\r\n    type: SET_TOTAL_USERS_COUNT,\r\n    totalUsersCount\r\n})\r\nexport const setIsFetching = (isFetching: boolean): set_is_fetching => ({\r\n    type: TOGGLE_IS_FETCHING,\r\n    isFetching\r\n})\r\nexport const toggleIsFollowingProgress = (isFetching: boolean, userId: number): set_is_following_progress => ({\r\n    type: TOGGLE_IS_FOLLOWING_PROGRESS,\r\n    isFetching,\r\n    userId\r\n})\r\n\r\nexport type stateType = {\r\n    usersPage: userType\r\n\r\n}\r\nexport type userType = {\r\n    users: Array<usersDataType>,\r\n    pageSize: number,\r\n    totalUsersCount: number,\r\n    currentPage: number,\r\n    isFetching: boolean,\r\n    followingInProgress: Array<number>\r\n}\r\nexport type usersDataType = {\r\n    id: number,\r\n    photos: { small: string, large: string },\r\n    name: string,\r\n    followed: boolean,\r\n    status: string,\r\n    location: { city: string, country: string }\r\n}\r\nexport type dispatchType =\r\n    ReturnType<typeof setIsFetching> |\r\n    ReturnType<typeof set_users> |\r\n    ReturnType<typeof setTotalUsersCount> |\r\n    ReturnType<typeof toggleIsFollowingProgress> |\r\n    ReturnType<typeof follow> |\r\n    ReturnType<typeof unfollow> |\r\n    ReturnType<typeof setCurrentPage>\r\n\r\n\r\nlet initialState = {\r\n    users: [],\r\n    pageSize: 20,\r\n    totalUsersCount: 0,\r\n    currentPage: 1,\r\n    isFetching: false,\r\n    followingInProgress: []\r\n}\r\n\r\n\r\nexport const usersReducer = (state: userType = initialState, action: dispatchType) => {\r\n    switch (action.type) {\r\n        case FOLLOW:\r\n            return {\r\n                ...state, users: state.users.map(u => {\r\n                    if (u.id === action.userId) {\r\n                        return {...u, followed: true}\r\n                    }\r\n                    return u\r\n                })\r\n            }\r\n        case UNFOLLOW:\r\n            return {\r\n                ...state, users: state.users.map(u => {\r\n                    if (u.id === action.userId) {\r\n                        return {...u, followed: false}\r\n                    }\r\n                    return u\r\n                })\r\n            }\r\n        case SET_USERS:\r\n            return {...state, users: action.users}\r\n        case SET_CURRENT_PAGE:\r\n            return {...state, currentPage: action.currentPage}\r\n        case SET_TOTAL_USERS_COUNT:\r\n            return {...state, totalUsersCount: action.totalUsersCount}\r\n        case TOGGLE_IS_FETCHING:\r\n            return {...state, isFetching: action.isFetching}\r\n        case TOGGLE_IS_FOLLOWING_PROGRESS:\r\n            return {\r\n                ...state,\r\n                followingInProgress: action.isFetching ? [...state.followingInProgress, action.userId] : [...state.followingInProgress.filter(id => id !== action.userId)]\r\n            }\r\n        default :\r\n            return state\r\n    }\r\n}\r\n\r\ntype ThunkType = ThunkAction<Promise<void>, stateType, unknown, dispatchType>\r\n\r\nexport const getUsers = (currentPage: number, pageSize: number): ThunkType => {\r\n    return async (dispatch) => {\r\n        dispatch(setIsFetching(true))\r\n        let data = await usersAPI.getUsers(currentPage, pageSize)\r\n        dispatch(setIsFetching(false))\r\n        dispatch(set_users(data.items))\r\n        dispatch(setTotalUsersCount(data.totalCount))\r\n    }\r\n}\r\n\r\nconst followUnfollowFlow = async (dispatch:any,userId:number,apiMethod:any,actionCreator:any) => {\r\n    dispatch(toggleIsFollowingProgress(true, userId))\r\n    let data = await apiMethod(userId)\r\n    if (data.resultCode === 0) {\r\n        dispatch(actionCreator(userId))\r\n    }\r\n    dispatch(toggleIsFollowingProgress(false, userId))\r\n}\r\n\r\nexport const getFollow = (userId: number): ThunkType => {\r\n    return async (dispatch) => {\r\n        let apiMethod = followAPI.follow.bind(followAPI)\r\n        let actionCreator = follow\r\n        followUnfollowFlow(dispatch,userId,apiMethod,actionCreator)\r\n    }\r\n}\r\nexport const getUnfollow = (userId: number): ThunkType => {\r\n    return async (dispatch) => {\r\n        let apiMethod = followAPI.unfollow.bind(followAPI)\r\n        let actionCreator = unfollow\r\n        followUnfollowFlow(dispatch,userId,apiMethod,actionCreator)\r\n    }\r\n}\r\n","import {authAPI, ResultCodesEnum} from \"../api/api\";\r\nimport {Dispatch} from \"redux\";\r\nimport {ThunkAction} from \"redux-thunk\";\r\nimport {stopSubmit} from \"redux-form\";\r\n\r\nconst SET_USER_DATA = \"SET_USER_DATA\"\r\nconst SET_ERROR = \"SET_ERROR\"\r\n\r\ntype ActionsType = setUserDataType | setErrorDataType\r\n\r\ntype setUserDataType = {\r\n    type: \"SET_USER_DATA\",\r\n    data: {},\r\n    isAuth: boolean\r\n}\r\ntype setErrorDataType = {\r\n    type: \"SET_ERROR\",\r\n    error: string\r\n}\r\nexport type stateType = {\r\n    auth: inStateType\r\n}\r\nexport type inStateType = {\r\n    id: number | null,\r\n    email: string | null,\r\n    login: string | null,\r\n    isAuth: boolean,\r\n    serverError: null | string\r\n}\r\ntype dispatchType = ReturnType<typeof setAuthUserData> | ReturnType<typeof setError>\r\n\r\nlet initialState = {\r\n    id: null,\r\n    email: null,\r\n    login: null,\r\n    isAuth: false,\r\n    serverError: null\r\n}\r\n\r\nexport const authReducer = (state: inStateType = initialState, action: ActionsType) => {\r\n    switch (action.type) {\r\n        case SET_USER_DATA:\r\n            return {\r\n                ...state,\r\n                ...action.data,\r\n                isAuth: action.isAuth,\r\n                serverError: null\r\n            }\r\n        case SET_ERROR:\r\n            return {\r\n                ...state,\r\n                serverError: action.error\r\n            }\r\n        default :\r\n            return state\r\n    }\r\n}\r\n\r\nexport type setUserDataActionType = {\r\n    id: number | null\r\n    email: string | null\r\n    login: string | null\r\n}\r\nexport const setAuthUserData = (data: setUserDataActionType, isAuth: boolean) => ({\r\n    type: SET_USER_DATA,\r\n    data,\r\n    isAuth\r\n} as const)\r\nexport const setError = (error: string) => ({type: \"SET_ERROR\", error} as const)\r\n\r\n\r\nexport const getAuthUserData = (): ThunkAction<void, stateType, unknown, dispatchType> => {\r\n    return async (dispatch) => {\r\n        let response = await authAPI.me()\r\n\r\n        if (response.resultCode === ResultCodesEnum.Success) {\r\n            dispatch(setAuthUserData(response.data, true))\r\n        }\r\n    }\r\n}\r\nexport const login = (data: dataType): ThunkAction<void, stateType, unknown, dispatchType> => {\r\n    return async (dispatch) => {\r\n        let response = await authAPI.login(data.email, data.password, data.rememberMe)\r\n        if (response.resultCode === ResultCodesEnum.Success) {\r\n            authAPI.me()\r\n            dispatch(setAuthUserData(response.data.data, true))\r\n        } else {\r\n            let message = response.messages.length > 0 ? response.messages[0] : \"Some error\"\r\n            dispatch(setError(message))\r\n        }\r\n    }\r\n}\r\nexport const logout = (): ThunkAction<Promise<void>, stateType, unknown, dispatchType> => {\r\n    return async (dispatch: Dispatch<dispatchType>) => {\r\n        let response = await authAPI.logout()\r\n        if (response.data.resultCode === 0) {\r\n            dispatch(setAuthUserData({email: null, id: null, login: null}, false))\r\n        }\r\n    }\r\n}\r\n\r\nexport type getAuthUserDataType = ReturnType<typeof getAuthUserData>\r\nexport type dataType = {\r\n    email: string, password: string, rememberMe: boolean\r\n}\r\n","import {ThunkAction} from \"redux-thunk\";\r\nimport {getAuthUserData, getAuthUserDataType} from \"./auth-reducer\";\r\n\r\n\r\n\r\nconst SET_INITIALIZED = \"SET_INITIALIZED\"\r\n\r\n\r\ntype ActionsType = setInitializedSuccessType\r\n\r\ntype setInitializedSuccessType = {\r\n    type: \"SET_INITIALIZED\"\r\n}\r\nexport type inStateType = {\r\n    initialized:boolean\r\n}\r\nexport type stateType = {\r\n    initialize: inStateType\r\n}\r\n//type dispatchType = ReturnType<typeof InitializedSuccess> | getAuthUserDataType\r\n\r\nlet initialState = {\r\n    initialized:false\r\n}\r\n\r\nexport const appReducer = (state: inStateType = initialState, action: ActionsType) => {\r\n    switch (action.type) {\r\n        case SET_INITIALIZED:\r\n            return {\r\n                ...state, initialized:true\r\n            }\r\n        default :\r\n            return state\r\n    }\r\n}\r\n\r\nexport const InitializedSuccess = () => ({\r\n    type: SET_INITIALIZED\r\n}as const)\r\n\r\nexport const initializeApp = ()  => {\r\n    return (dispatch:any) => {\r\n        dispatch(getAuthUserData()).then(() => {\r\n            dispatch(InitializedSuccess())\r\n        })\r\n    }\r\n}\r\n\r\n\r\n","import {applyMiddleware, combineReducers, compose, createStore} from \"redux\";\r\nimport {profileReducer} from \"./porfile_reducer\";\r\nimport {dialogsReducer} from \"./dialogs_reducer\";\r\nimport {usersReducer} from \"./users_reducer\";\r\nimport {authReducer} from \"./auth-reducer\";\r\nimport {reducer as formReducer} from 'redux-form'\r\nimport thunk from \"redux-thunk\";\r\nimport {appReducer} from \"./app-reducer\";\r\n\r\n\r\nlet reducers = combineReducers({\r\n    postsPropsAll: profileReducer,\r\n    dialogsPropsAll: dialogsReducer,\r\n    usersPage: usersReducer,\r\n    auth: authReducer,\r\n    form: formReducer,\r\n    app: appReducer\r\n})\r\n\r\n//export let store = createStore(reducers,applyMiddleware(thunk))\r\n// @ts-ignore\r\nconst composeEnhancers = window[\"__REDUX_DEVTOOLS_EXTENSION_COMPOSE__\"] || compose;\r\nexport const store = createStore(reducers, composeEnhancers(\r\n    applyMiddleware(thunk)\r\n));\r\n\r\nexport type stateType = ReturnType<typeof reducers>","import React from \"react\";\r\nimport classes from './Navigation.module.css'\r\nimport {NavLink} from \"react-router-dom\";\r\n\r\n\r\nexport const Navigation = () => {\r\n    return (\r\n        <nav className={classes.nav}>\r\n            <div className={classes.buttons}>\r\n             <div className={classes.item}>\r\n                <NavLink to='/profile' activeClassName={classes.active}>Profile</NavLink>\r\n            </div>\r\n            <div className={classes.item}>\r\n                <NavLink to='/dialogs' activeClassName={classes.active}>Message</NavLink>\r\n            </div>\r\n            {/*<div className={classes.item}>\r\n                <NavLink to='/news' activeClassName={classes.active}>News</NavLink>\r\n            </div>\r\n            <div className={classes.item}>\r\n                <NavLink to='/music' activeClassName={classes.active}>Music</NavLink>\r\n            </div>*/}\r\n            <div className={classes.itemSettings}>\r\n                <NavLink to='/users' activeClassName={classes.active}>Find Users</NavLink>\r\n            </div>\r\n           {/* <div className={classes.itemSettings}>\r\n                <NavLink to='/settings' activeClassName={classes.active}>Settings</NavLink>\r\n            </div>*/}\r\n            </div>\r\n        </nav>\r\n    )\r\n}","export default __webpack_public_path__ + \"static/media/user.a70779f1.png\";","import React, {useState} from \"react\";\r\nimport styles from \"./Paginator.module.css\";\r\n\r\n\r\n\r\ntype paginatorPropsType = {\r\n    pageSize: number\r\n    currentPage: number\r\n    totalItemsCount: number\r\n    onPageChanged: (pageNumber: number) => void\r\n    portionSize?:number\r\n}\r\n\r\nexport const Paginator = ({pageSize,currentPage,totalItemsCount,onPageChanged,portionSize=10}: paginatorPropsType) => {\r\n    let pagesCount = Math.ceil(totalItemsCount / pageSize)\r\n\r\n    let pages = []\r\n    for (let i = 1; i <= pagesCount; ++i) {\r\n        pages.push(i)\r\n    }\r\n\r\n    let portionCount= Math.ceil(pagesCount / portionSize)\r\n    let [portionNumber,setPortionNumber] = useState(1)\r\n    let leftPortionPageNumber = (portionNumber-1)*portionSize+1\r\n    let rightPortionPageNumber = portionNumber*portionSize\r\n\r\n    return  <div className={styles.main}>\r\n        {portionNumber > 1  && <button onClick={()=> setPortionNumber(portionNumber-1)}>Previous</button>}\r\n            {pages.filter(p=> p>=leftPortionPageNumber && p<=rightPortionPageNumber)\r\n                .map(p => {\r\n                // @ts-ignore\r\n                return <span className={currentPage === p ? styles.selectedPage : styles.item}\r\n                             onClick={(e) => {\r\n                                 onPageChanged(p)\r\n                             }}>{p}</span>\r\n            })}\r\n        {portionCount > portionNumber  && <button onClick={()=> setPortionNumber(portionNumber+1)}>Next</button>}\r\n        </div>\r\n}","import React from \"react\";\r\nimport styles from \"./users.module.css\";\r\nimport userPhoto from \"../../assets/images/user.png\";\r\nimport {usersDataType} from \"../../redux/users_reducer\";\r\nimport {NavLink} from \"react-router-dom\";\r\nimport {Button} from \"@material-ui/core\";\r\nimport {Paginator} from \"../common/Paginator/Paginator\";\r\n\r\n\r\ntype usersAllType2 = {\r\n    users: Array<usersDataType>\r\n    follow: (userId: number) => void\r\n    unfollow: (userId: number) => void\r\n    pageSize: number\r\n    currentPage: number\r\n    totalUsersCount: number\r\n    onPageChanged: (pageNumber: number) => void\r\n    followingInProgress: Array<number>\r\n    toggleIsFollowingProgress: (isFetching: boolean, userId: number) => void\r\n}\r\n\r\nexport const Users = (props: usersAllType2) => {\r\n\r\n    return <div className={styles.usersWrapper}>\r\n\r\n        <Paginator currentPage={props.currentPage}\r\n                   onPageChanged={props.onPageChanged}\r\n                   pageSize={props.pageSize}\r\n                   totalItemsCount={props.totalUsersCount}/>\r\n\r\n        <div className={styles.users}>\r\n            {\r\n                props.users.map(u => <div className={styles.user} key={u.id}>\r\n            <span>\r\n               <div>\r\n                   <NavLink to={\"profile/\" + u.id}>\r\n                  <img src={u.photos.small != null ? u.photos.small : userPhoto} className={styles.userPhoto}/>\r\n                   </NavLink>\r\n               </div>\r\n            </span>\r\n                        <span>\r\n                    <span>\r\n                        <div>{u.name}</div>\r\n                        <div>{u.status}</div>\r\n                    </span>\r\n                    <span>\r\n                        <div>{\"u.location.country\"}</div>\r\n                        <div>{\"u.location.city\"}</div>\r\n                    </span>\r\n                </span>\r\n                        <div>\r\n                            {u.followed ? <Button variant=\"contained\" size=\"small\" color=\"primary\"\r\n                                                  disabled={props.followingInProgress.some(id => id === u.id)}\r\n                                                  onClick={() => {\r\n                                                      props.unfollow(u.id)\r\n                                                  }}\r\n                                >Unfollow</Button>\r\n\r\n                                :\r\n\r\n                                <Button variant=\"contained\" size=\"small\" color=\"primary\"\r\n                                        disabled={props.followingInProgress.some(id => id === u.id)}\r\n                                        onClick={() => {\r\n                                            props.follow(u.id)\r\n                                        }}\r\n                                >Follow</Button>}\r\n                        </div>\r\n                    </div>\r\n                )\r\n            }\r\n        </div>\r\n    </div>\r\n}","import { stateType } from '../redux/redux-store';\r\n\r\nexport const getUsersContainer = (state:stateType)=> {\r\n    return state.usersPage.users\r\n}\r\nexport const getPageSize = (state:stateType)=> {\r\n    return state.usersPage.pageSize\r\n}\r\nexport const getTotalUsersCount = (state:stateType)=> {\r\n    return state.usersPage.totalUsersCount\r\n}\r\nexport const getCurrentPage = (state:stateType)=> {\r\n    return state.usersPage.currentPage\r\n}\r\nexport const getFollowingInProgress = (state:stateType)=> {\r\n    return state.usersPage.followingInProgress\r\n}\r\nexport const getIsFetching = (state:stateType)=> {\r\n    return state.usersPage.isFetching\r\n}","import React from 'react'\r\nimport {connect} from \"react-redux\";\r\nimport {\r\n    setCurrentPage,\r\n    usersDataType, toggleIsFollowingProgress, getUsers, getFollow, getUnfollow\r\n} from \"../../redux/users_reducer\";\r\nimport {Users} from \"./Users\";\r\nimport {withAuthRedirect} from \"../../hoc/withAuthRedirect\";\r\nimport {compose} from \"redux\";\r\nimport { stateType } from '../../redux/redux-store';\r\nimport {\r\n    getCurrentPage,\r\n    getFollowingInProgress, getIsFetching,\r\n    getPageSize,\r\n    getTotalUsersCount,\r\n    getUsersContainer\r\n} from \"../../redux/users-selectors\";\r\nimport {LinearProgress} from \"@material-ui/core\";\r\n\r\ntype usersAllType = {\r\n    users: Array<usersDataType>\r\n    getFollow: (userId: number) => void\r\n    getUnfollow: (userId: number) => void\r\n    pageSize: number\r\n    currentPage: number\r\n    setCurrentPage: (currentPage: number) => void\r\n    totalUsersCount: number\r\n    toggleIsFollowingProgress: (isFetching: boolean,userId:number) => void\r\n    isFetching: boolean\r\n    followingInProgress: Array<number>\r\n    getUsers:(currentPage:number,pageSize:number) => void\r\n}\r\n\r\nexport class UsersContainer extends React.Component<usersAllType> {\r\n\r\n    componentDidMount() {\r\n        this.props.getUsers(this.props.currentPage,this.props.pageSize)\r\n    }\r\n\r\n    onPageChanged = (pageNumber: number) => {\r\n        this.props.setCurrentPage(pageNumber)\r\n        this.props.getUsers(pageNumber,this.props.pageSize)\r\n    }\r\n\r\n    render() {\r\n        return <>\r\n            {this.props.isFetching ? <LinearProgress /> :\r\n            <Users totalUsersCount={this.props.totalUsersCount}\r\n                   pageSize={this.props.pageSize}\r\n                   currentPage={this.props.currentPage}\r\n                   onPageChanged={this.onPageChanged}\r\n                   users={this.props.users}\r\n                   follow={this.props.getFollow}\r\n                   unfollow={this.props.getUnfollow}\r\n                   followingInProgress={this.props.followingInProgress}\r\n                   toggleIsFollowingProgress={this.props.toggleIsFollowingProgress}/>}\r\n        </>\r\n    }\r\n}\r\n\r\nlet mapStateToProps = (state: stateType) => {\r\n    return {\r\n        users: getUsersContainer(state),\r\n        pageSize: getPageSize(state),\r\n        totalUsersCount: getTotalUsersCount(state),\r\n        currentPage: getCurrentPage(state),\r\n        isFetching: getIsFetching(state),\r\n        followingInProgress: getFollowingInProgress(state)\r\n\r\n    }\r\n}\r\n\r\nexport default compose(\r\n    connect(mapStateToProps, {\r\n        getFollow,\r\n        getUnfollow,\r\n        setCurrentPage,\r\n        toggleIsFollowingProgress,\r\n        getUsers\r\n    }),\r\n    withAuthRedirect\r\n)(UsersContainer) as React.ComponentType\r\n","import React from \"react\";\r\nimport s from './Header.module.css'\r\nimport {NavLink} from \"react-router-dom\";\r\nimport { Button } from \"@material-ui/core\";\r\n\r\n\r\ntype propsType = {\r\n    isAuth:boolean,\r\n    login:string|null,\r\n    logout:() => void\r\n}\r\n\r\nexport const Header = (props:propsType) => {\r\n    return (\r\n        <header className={s.header}>\r\n                <div className={s.loginBlock}>\r\n                    {props.isAuth\r\n                        ? <div>{props.login} - <Button className={s.button} onClick={props.logout}>Log out</Button></div>\r\n                        : <button><NavLink className={s.logButton} to={'/login'}>Login</NavLink></button>}\r\n                </div>\r\n        </header>\r\n    )\r\n}","import React from \"react\";\r\nimport {Header} from \"./Header\";\r\nimport {connect} from \"react-redux\";\r\nimport {logout, stateType} from \"../../redux/auth-reducer\";\r\n\r\n\r\n\r\ntype mapDispatchToPropsType = {\r\n    logout:() => void\r\n}\r\ntype mapStateToPropsType = {\r\n    isAuth:boolean,\r\n    login:string | null\r\n}\r\ntype PropsType = mapDispatchToPropsType & mapStateToPropsType\r\n\r\nexport class HeaderContainer extends React.Component<PropsType> {\r\n\r\n\r\n    render() {\r\n        return <Header isAuth={this.props.isAuth} login={this.props.login} logout={this.props.logout} />\r\n    }\r\n}\r\n\r\nlet mapStateToProps = (state: stateType) => {\r\n    return {\r\n        isAuth: state.auth.isAuth,\r\n        login: state.auth.login\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, {logout})(HeaderContainer)","import React, {useEffect} from 'react';\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {login} from \"../../redux/auth-reducer\";\r\nimport {stateType} from \"../../redux/redux-store\";\r\nimport {Redirect} from 'react-router-dom';\r\nimport {useFormik} from \"formik\";\r\nimport {Button, Checkbox, FormControl, FormControlLabel, FormGroup, Grid, TextField} from \"@material-ui/core\";\r\n\r\n\r\n\r\ntype FormikErrorType = {\r\n    email?: string\r\n    password?: string\r\n    rememberMe?: boolean\r\n}\r\n\r\n\r\nexport const Login = () => {\r\n\r\n    const isAuth = useSelector<stateType>(state => state.auth.isAuth)\r\n    const dispatch = useDispatch()\r\n\r\n    const formik = useFormik({\r\n        initialValues: {\r\n            email: '',\r\n            password: '',\r\n            rememberMe: false\r\n        },\r\n        validate: (values) => {\r\n            const errors: FormikErrorType = {};\r\n            if (!values.email) {\r\n                errors.email = 'Email Required!';\r\n            } else if (!/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(values.email)) {\r\n                errors.email = 'Invalid email address';\r\n            }\r\n            if (!values.password) {\r\n                errors.password = 'Password Required!'\r\n            } else if (values.password.length < 3) {\r\n                errors.password = 'Password must be more than 2 symbols!'\r\n            }\r\n            return errors;\r\n        },\r\n        onSubmit: value => {\r\n            dispatch(login(value))\r\n            formik.resetForm()\r\n        }\r\n    })\r\n\r\n        if (isAuth) {\r\n            return <Redirect to={\"/profile\"}/>\r\n        }\r\n\r\n\r\n\r\n    return <Grid container justify=\"center\">\r\n        <Grid item xs={4}>\r\n            <form onSubmit={formik.handleSubmit}>\r\n                <FormControl>\r\n                    <FormGroup>\r\n                        <TextField\r\n                            label=\"Email\"\r\n                            margin=\"normal\"\r\n                            name=\"email\"\r\n                            {...formik.getFieldProps('email')}\r\n                        />\r\n                        {formik.touched.email &&\r\n                        formik.errors.email ? <div style={{color: \"red\"}}>{formik.errors.email}</div> : null}\r\n                        <TextField\r\n                            type=\"password\"\r\n                            label=\"Password\"\r\n                            margin=\"normal\"\r\n                            name=\"password\"\r\n                            {...formik.getFieldProps('password')}\r\n                        />\r\n                        {formik.touched.password &&\r\n                        formik.errors.password ? <div style={{color: \"red\"}}>{formik.errors.password}</div> : null}\r\n                        <FormControlLabel\r\n                            name=\"rememberMe\"\r\n                            label={\"Remember me\"}\r\n                            {...formik.getFieldProps('rememberMe')}\r\n                            control={<Checkbox/>}\r\n                        />\r\n                        <Button type={'submit'} variant={'contained'} color={'primary'}>Login</Button>\r\n                    </FormGroup>\r\n                </FormControl>\r\n            </form>\r\n        </Grid>\r\n    </Grid>\r\n}","import React, {ComponentType} from \"react\";\r\nimport {Redirect} from \"react-router-dom\";\r\nimport {connect} from \"react-redux\";\r\nimport {stateType} from \"../redux/redux-store\";\r\nimport {LinearProgress} from \"@material-ui/core\";\r\n\r\n\r\nexport function withSuspense<WCP>(Component: React.ComponentType<WCP>) {\r\n    return (props:WCP) => {\r\n        return (\r\n            <React.Suspense fallback={<LinearProgress />}>\r\n                <Component {...props}/>\r\n            </React.Suspense>\r\n        )\r\n    }\r\n}\r\n","import React from 'react';\r\nimport './App.css';\r\nimport {Navigation} from \"./components/Navigation/Navigation\";\r\nimport {Route, withRouter} from \"react-router-dom\";\r\nimport UsersContainer from \"./components/Users/UsersContainer\";\r\nimport HeaderContainer from \"./components/Header/HeaderContainer\";\r\nimport {Login} from \"./components/Login/Login\";\r\nimport {connect} from \"react-redux\";\r\nimport {compose} from \"redux\";\r\nimport {initializeApp} from \"./redux/app-reducer\";\r\nimport {stateType} from \"./redux/redux-store\";\r\nimport {LinearProgress} from \"@material-ui/core\";\r\nimport {withSuspense} from './hoc/withSuspence';\r\n\r\nconst ProfileContainer = React.lazy(() => import('./components/Profile/ProfileContainer'))\r\nconst DialogsContainer = React.lazy(() => import('./components/Dilogs/DialogsContainer'))\r\n\r\nconst SuspendedDialogs = withSuspense(DialogsContainer)\r\nconst SuspendedProfile = withSuspense(ProfileContainer)\r\n\r\nclass App extends React.Component<PropsType> {\r\n\r\n    componentDidMount() {\r\n        this.props.initializeApp()\r\n    }\r\n\r\n    render() {\r\n        if (!this.props.initialized) {\r\n            return <LinearProgress />\r\n        }\r\n\r\n\r\n        return (\r\n\r\n            <div className='app-wrapper'>\r\n                <HeaderContainer/>\r\n                <Navigation/>\r\n                <div className='app-wrapper-content'>\r\n                    <Route exact path={'/'} render={() => <ProfileContainer/>}/>\r\n                    <Route path='/dialogs' render={() => <SuspendedDialogs/>}/>\r\n                    <Route path='/profile/:userId?' render={() => <SuspendedProfile/>}/>\r\n                    <Route path='/users' render={() => <UsersContainer/>}/>\r\n                    <Route path='/login' render={() => <Login/>}/>\r\n                </div>\r\n            </div>\r\n\r\n\r\n        )\r\n    }\r\n}\r\n\r\nconst MapStateToProps = (state: stateType): MapStateType => {\r\n    return {\r\n        initialized: state.app.initialized\r\n    }\r\n}\r\n\r\ntype MapStateType = {\r\n    initialized: boolean\r\n}\r\n\r\ntype MapDispatchPropsType = {\r\n    initializeApp: () => void\r\n}\r\n\r\ntype PropsType = MapStateType & MapDispatchPropsType\r\n\r\nexport default compose<React.ComponentType>(\r\n    withRouter,\r\n    connect<MapStateType, MapDispatchPropsType, {}, stateType>(MapStateToProps, {initializeApp}))(App);","import React from 'react';\nimport './index.css';\nimport {store} from \"./redux/redux-store\";\nimport ReactDOM from \"react-dom\";\nimport {BrowserRouter} from \"react-router-dom\";\nimport App from './App'\nimport {Provider} from \"react-redux\";\n\n\nReactDOM.render(\n\n        <BrowserRouter>\n            <Provider store={store}>\n            <App />\n            </Provider>\n        </BrowserRouter>,\n    document.getElementById('root')\n)\n\n\n\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"nav\":\"Navigation_nav__2PkAl\",\"buttons\":\"Navigation_buttons__-FEhD\",\"item\":\"Navigation_item__2Gs4w\",\"itemSettings\":\"Navigation_itemSettings__3EItE\",\"friends\":\"Navigation_friends__kI6O8\",\"active\":\"Navigation_active__3MhZN\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"users\":\"users_users__1Q2tr\",\"user\":\"users_user__2e0KG\",\"userPhoto\":\"users_userPhoto__1Zlhn\",\"usersWrapper\":\"users_usersWrapper__1H7BJ\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"header\":\"Header_header__39c1E\",\"loginBlock\":\"Header_loginBlock__qiKS_\",\"button\":\"Header_button__jLhxs\",\"logButton\":\"Header_logButton__QZ-io\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"main\":\"Paginator_main__1pF4J\",\"item\":\"Paginator_item__322TD\",\"selectedPage\":\"Paginator_selectedPage__3dBnd\"};","import {profileAPI} from \"../api/api\";\r\nimport {ThunkAction} from \"redux-thunk\";\r\n\r\nexport type myPostPropsType = {\r\n    id: number\r\n    message: string\r\n    likesCount: number\r\n}\r\nexport type ProfileType = {\r\n    userId: number\r\n    lookingForAJob: boolean\r\n    lookingForAJobDescription: string\r\n    fullName: string\r\n    contacts: ContactsType\r\n    photos: PhotosType\r\n}\r\nexport type ContactsType = {\r\n    github: string | null\r\n    vk: string | null\r\n    facebook: string | null\r\n    instagram: string | null\r\n    twitter: string | null\r\n    website: string | null\r\n    youtube: string | null\r\n    mainLink: string | null\r\n}\r\nexport type PhotosType = { small: string, large: string }\r\nexport type AddPostType = {\r\n    type: \"ADD-POST\",\r\n    newPost: string\r\n}\r\nexport type DeletePostType = {\r\n    type: \"DELETE-POST\",\r\n    postId: number\r\n}\r\nexport type setUserProfileType = {\r\n    type: \"SET-USER-PROFILE\"\r\n    profile: ProfileType\r\n}\r\nexport type setStatusType = {\r\n    type: \"SET-STATUS\"\r\n    status: string\r\n}\r\n\r\n\r\nexport type dispatchType = AddPostType | setUserProfileType | setStatusType\r\nexport type stateType = typeof initialState\r\nlet initialState = {\r\n    postsData: [\r\n        {id: 1, message: 'Hi,how are you?', likesCount: 12},\r\n        {id: 2, message: 'It is my first post', likesCount: 11},\r\n        {id: 3, message: 'Bonjour', likesCount: 3},\r\n    ],\r\n    profile: null as ProfileType | null,\r\n    status: \"\"\r\n}\r\n\r\n\r\nexport const profileReducer = (state = initialState, action: ActionsTypes): stateType => {\r\n    switch (action.type) {\r\n        case \"ADD-POST\":\r\n            let NewPost: myPostPropsType = {\r\n                id: 5,\r\n                message: action.newPost,\r\n                likesCount: 0\r\n            }\r\n\r\n            return {\r\n                ...state,\r\n                postsData: [...state.postsData, NewPost],\r\n            }\r\n\r\n        case \"SET-USER-PROFILE\":\r\n            return {...state, profile: action.profile}\r\n        case \"SET-STATUS\":\r\n            return {...state, status: action.status}\r\n        case \"DELETE-POST\":\r\n            return {...state, postsData: state.postsData.filter((p) => p.id !== action.postId)}\r\n        default :\r\n            return state\r\n    }\r\n}\r\nexport const addPostCreateAction = (newPost: string): AddPostType => ({\r\n    type: \"ADD-POST\", newPost\r\n}) as const\r\n\r\nexport const setUserProfile = (profile: ProfileType): setUserProfileType => ({\r\n    type: \"SET-USER-PROFILE\", profile\r\n}) as const\r\nexport const setStatus = (status: string): setStatusType => (\r\n    {type: \"SET-STATUS\", status}\r\n) as const\r\nexport const deletePost = (postId: number): DeletePostType => (\r\n    {type: \"DELETE-POST\", postId}\r\n) as const\r\n\r\nexport const getUserProfile = (userId: string): ThunkAction<Promise<void>, stateType, unknown, ActionsTypes> => {\r\n    return async (dispatch) => {\r\n        let response = await profileAPI.getProfile(userId)\r\n        dispatch(setUserProfile(response))\r\n    }\r\n}\r\nexport const getStatus = (userId: number): ThunkAction<Promise<void>, stateType, unknown, ActionsTypes> => {\r\n    return async (dispatch) => {\r\n        let response = await profileAPI.getStatus(userId)\r\n        dispatch(setStatus(response.data))\r\n\r\n    }\r\n}\r\nexport const updateStatus = (status: string): ThunkAction<Promise<void>, stateType, unknown, ActionsTypes> => {\r\n    return async (dispatch) => {\r\n        let response = await profileAPI.updateStatus(status)\r\n        if (response.data.resultCode === 0) {\r\n            dispatch(setStatus(status))\r\n        }\r\n    }\r\n}\r\n\r\nexport type ActionsTypes =\r\n    ReturnType<typeof addPostCreateAction>\r\n    | ReturnType<typeof setUserProfile>\r\n    | ReturnType<typeof setStatus>\r\n    | ReturnType<typeof deletePost>","import React, {ComponentType} from \"react\";\r\nimport {Redirect} from \"react-router-dom\";\r\nimport {connect} from \"react-redux\";\r\nimport {stateType} from \"../redux/redux-store\";\r\n\r\ntype mapStateToPropsForRedirectType = {\r\n    isAuth:boolean\r\n}\r\n\r\nconst mapStateToPropsForRedirect = (state:stateType):mapStateToPropsForRedirectType => {\r\n    return {\r\n        isAuth:state.auth.isAuth\r\n    }\r\n}\r\n\r\nexport function withAuthRedirect <T>(Component:ComponentType<T>)  {\r\n    const RedirectComponent = (props:mapStateToPropsForRedirectType) => {\r\n        let {isAuth,...restProps} = props\r\n            if(!props.isAuth) return <Redirect to='/login' />\r\n            return (\r\n                <Component {...restProps as T}/>)\r\n        }\r\n    return connect(mapStateToPropsForRedirect,{})(RedirectComponent)\r\n\r\n\r\n}"],"sourceRoot":""}